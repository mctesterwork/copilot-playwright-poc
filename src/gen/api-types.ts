/**
 * Generated by Kubb (https://kubb.dev/).
 * Do not edit manually.
 */

export const alertCategoryEnum = {
  Met: 'Met',
  Geo: 'Geo',
  Safety: 'Safety',
  Security: 'Security',
  Rescue: 'Rescue',
  Fire: 'Fire',
  Health: 'Health',
  Env: 'Env',
  Transport: 'Transport',
  Infra: 'Infra',
  CBRNE: 'CBRNE',
  Other: 'Other',
} as const;

export type AlertCategoryEnumKey = (typeof alertCategoryEnum)[keyof typeof alertCategoryEnum];

export const alertResponseEnum = {
  Shelter: 'Shelter',
  Evacuate: 'Evacuate',
  Prepare: 'Prepare',
  Execute: 'Execute',
  Avoid: 'Avoid',
  Monitor: 'Monitor',
  Assess: 'Assess',
  AllClear: 'AllClear',
  None: 'None',
} as const;

export type AlertResponseEnumKey = (typeof alertResponseEnum)[keyof typeof alertResponseEnum];

export const alertScopeEnum = {
  Public: 'Public',
  Restricted: 'Restricted',
  Private: 'Private',
} as const;

export type AlertScopeEnumKey = (typeof alertScopeEnum)[keyof typeof alertScopeEnum];

/**
 * @description An object representing a public alert message.\nUnless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.\nhttp://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://vlab.noaa.gov/web/nws-common-alerting-protocol/cap-documentation\n
 */
export type Alert = {
  /**
   * @description The identifier of the alert message.
   * @type string | undefined
   */
  id?: AlertId;
  /**
   * @description A textual description of the area affected by the alert.
   * @type string | undefined
   */
  areaDesc?: string;
  /**
   * @description Lists of codes for NWS public zones and counties affected by the alert.
   * @type object | undefined
   */
  geocode?: {
    /**
     * @description A list of NWS public zone or county identifiers.
     * @type array | undefined
     */
    UGC?: Array<NWSZoneID | string>;
    /**
     * @description A list of SAME (Specific Area Message Encoding) codes for affected counties.
     * @type array | undefined
     */
    SAME?: string[];
  };
  /**
   * @description An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification.\n
   * @type array | undefined
   */
  affectedZones?: string[];
  /**
   * @description A list of prior alerts that this alert updates or replaces.
   * @type array | undefined
   */
  references?: {
    /**
     * @description An API link to the prior alert.
     * @type string | undefined, uri
     */
    '@id'?: string;
    /**
     * @description The identifier of the alert message.
     * @type string | undefined
     */
    identifier?: AlertId;
    /**
     * @description The sender of the prior alert.
     * @type string | undefined
     */
    sender?: string;
    /**
     * @description The time the prior alert was sent.
     * @type string | undefined, date-time
     */
    sent?: string;
  }[];
  /**
   * @description The time of the origination of the alert message.
   * @type string | undefined, date-time
   */
  sent?: string;
  /**
   * @description The effective time of the information of the alert message.
   * @type string | undefined, date-time
   */
  effective?: string;
  /**
   * @description The expected time of the beginning of the subject event of the alert message.
   * @type string, date-time
   */
  onset?: string | null;
  /**
   * @description The expiry time of the information of the alert message.
   * @type string | undefined, date-time
   */
  expires?: string;
  /**
   * @description The expected end time of the subject event of the alert message.
   * @type string, date-time
   */
  ends?: string | null;
  /**
   * @type string | undefined
   */
  status?: AlertStatus;
  /**
   * @type string | undefined
   */
  messageType?: AlertMessageType;
  /**
   * @description The code denoting the category of the subject event of the alert message.
   * @type string | undefined
   */
  category?: AlertCategoryEnumKey;
  /**
   * @type string | undefined
   */
  severity?: AlertSeverity;
  /**
   * @type string | undefined
   */
  certainty?: AlertCertainty;
  /**
   * @type string | undefined
   */
  urgency?: AlertUrgency;
  /**
   * @description The text denoting the type of the subject event of the alert message.
   * @type string | undefined
   */
  event?: string;
  /**
   * @description Email address of the NWS webmaster.
   * @type string | undefined
   */
  sender?: string;
  /**
   * @description The text naming the originator of the alert message.
   * @type string | undefined
   */
  senderName?: string;
  /**
   * @description The text headline of the alert message.
   * @type string
   */
  headline?: string | null;
  /**
   * @description The text describing the subject event of the alert message.
   * @type string | undefined
   */
  description?: string;
  /**
   * @description The text describing the recommended action to be taken by recipients of the alert message.\n
   * @type string
   */
  instruction?: string | null;
  /**
   * @description The code denoting the type of action recommended for the target audience.\nThis corresponds to responseType in the CAP specification.\n
   * @type string | undefined
   */
  response?: AlertResponseEnumKey;
  /**
   * @description System-specific additional parameters associated with the alert message.\nThe keys in this object correspond to parameter definitions in the NWS CAP specification.\n
   * @type object | undefined
   */
  parameters?: {
    [key: string]: any[];
  };
  /**
   * @description The code denoting the intended distribution of the alert message.
   * @type string | undefined
   */
  scope?: AlertScopeEnumKey;
  /**
   * @description The code denoting the special handling of the alert message.
   * @type string | undefined
   */
  code?: string;
  /**
   * @description The code denoting the language of the info sub-element of the alert message.
   * @type string | undefined
   */
  language?: string;
  /**
   * @description The identifier of the hyperlink associating additional information within the alert message.
   * @type string | undefined
   */
  web?: string;
  /**
   * @description System-specific code identifiying the event type of the alert message The keys in this object correspond to eventCode definitions in the NWS CAP specification.\n
   * @type object | undefined
   */
  eventCode?: {
    [key: string]: any[];
  };
};

export type AlertCollection = {
  /**
   * @description A title describing the alert collection
   * @type string | undefined
   */
  title?: string;
  /**
   * @description The last time a change occurred to this collection
   * @type string | undefined, date-time
   */
  updated?: string;
  /**
   * @description Links for retrieving more data from paged data sets
   * @type object | undefined
   */
  pagination?: PaginationInfo;
};

export type AlertCollectionGeoJson = GeoJsonFeatureCollection &
  AlertCollection & {
    /**
     * @type array | undefined
     */
    features?: {
      /**
       * @description An object representing a public alert message.\nUnless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.\nhttp://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://vlab.noaa.gov/web/nws-common-alerting-protocol/cap-documentation\n
       * @type object | undefined
       */
      properties?: Alert;
    }[];
  };

export type AlertCollectionJsonLd = AlertCollection & {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: Alert[];
};

export type AlertCap = object;

export type AlertGeoJson = GeoJsonFeature & {
  /**
   * @description An object representing a public alert message.\nUnless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information.\nhttp://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://vlab.noaa.gov/web/nws-common-alerting-protocol/cap-documentation\n
   * @type object | undefined
   */
  properties?: Alert;
};

export type AlertJsonLd = {
  /**
   * @type array | undefined
   */
  '@graph'?: Alert[];
};

/**
 * @description The identifier of the alert message.
 */
export type AlertId = string;

export const alertCertaintyEnum = {
  Observed: 'Observed',
  Likely: 'Likely',
  Possible: 'Possible',
  Unlikely: 'Unlikely',
  Unknown: 'Unknown',
} as const;

export type AlertCertaintyEnumKey = (typeof alertCertaintyEnum)[keyof typeof alertCertaintyEnum];

export type AlertCertainty = AlertCertaintyEnumKey;

export const alertMessageTypeEnum = {
  Alert: 'Alert',
  Update: 'Update',
  Cancel: 'Cancel',
  Ack: 'Ack',
  Error: 'Error',
} as const;

export type AlertMessageTypeEnumKey = (typeof alertMessageTypeEnum)[keyof typeof alertMessageTypeEnum];

export type AlertMessageType = AlertMessageTypeEnumKey;

export const alertSeverityEnum = {
  Extreme: 'Extreme',
  Severe: 'Severe',
  Moderate: 'Moderate',
  Minor: 'Minor',
  Unknown: 'Unknown',
} as const;

export type AlertSeverityEnumKey = (typeof alertSeverityEnum)[keyof typeof alertSeverityEnum];

export type AlertSeverity = AlertSeverityEnumKey;

export const alertStatusEnum = {
  Actual: 'Actual',
  Exercise: 'Exercise',
  System: 'System',
  Test: 'Test',
  Draft: 'Draft',
} as const;

export type AlertStatusEnumKey = (typeof alertStatusEnum)[keyof typeof alertStatusEnum];

export type AlertStatus = AlertStatusEnumKey;

export const alertUrgencyEnum = {
  Immediate: 'Immediate',
  Expected: 'Expected',
  Future: 'Future',
  Past: 'Past',
  Unknown: 'Unknown',
} as const;

export type AlertUrgencyEnumKey = (typeof alertUrgencyEnum)[keyof typeof alertUrgencyEnum];

export type AlertUrgency = AlertUrgencyEnumKey;

/**
 * @description An alert entry in an Atom feed
 */
export type AlertAtomEntry = {
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined
   */
  updated?: string;
  /**
   * @type string | undefined
   */
  published?: string;
  /**
   * @type object | undefined
   */
  author?: {
    /**
     * @type string | undefined
     */
    name?: string;
  };
  /**
   * @type string | undefined
   */
  summary?: string;
  /**
   * @type string | undefined
   */
  event?: string;
  /**
   * @type string | undefined
   */
  sent?: string;
  /**
   * @type string | undefined
   */
  effective?: string;
  /**
   * @type string | undefined
   */
  expires?: string;
  /**
   * @type string | undefined
   */
  status?: string;
  /**
   * @type string | undefined
   */
  msgType?: string;
  /**
   * @type string | undefined
   */
  category?: string;
  /**
   * @type string | undefined
   */
  urgency?: string;
  /**
   * @type string | undefined
   */
  severity?: string;
  /**
   * @type string | undefined
   */
  certainty?: string;
  /**
   * @type string | undefined
   */
  areaDesc?: string;
  /**
   * @type string | undefined
   */
  polygon?: string;
  /**
   * @type array | undefined
   */
  geocode?: AlertXMLParameter[];
  /**
   * @type array | undefined
   */
  parameter?: AlertXMLParameter[];
};

export type AlertXMLParameter = {
  /**
   * @type string | undefined
   */
  valueName?: string;
  /**
   * @type string | undefined
   */
  value?: string;
};

/**
 * @description An alert feed in Atom format
 */
export type AlertAtomFeed = {
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined
   */
  generator?: string;
  /**
   * @type string | undefined
   */
  updated?: string;
  /**
   * @type object | undefined
   */
  author?: {
    /**
     * @type string | undefined
     */
    name?: string;
  };
  /**
   * @type string | undefined
   */
  title?: string;
  /**
   * @type array | undefined
   */
  entry?: AlertAtomEntry[];
};

/**
 * @description State/territory codes and marine area codes
 */
export type AreaCode = StateTerritoryCode | MarineAreaCode;

/**
 * @description ATSU Identifier
 * @pattern ^[A-Z]{3,4}$
 */
export type ATSUIdentifier = string;

export type BinaryFile = Blob;

export type CenterWeatherAdvisoryCollectionGeoJson = GeoJsonFeatureCollection & {
  /**
   * @type array | undefined
   */
  features?: {
    /**
     * @type object | undefined
     */
    properties?: CenterWeatherAdvisory;
  }[];
};

export type CenterWeatherAdvisoryGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: CenterWeatherAdvisory;
};

export type CenterWeatherAdvisory = {
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined, date-time
   */
  issueTime?: string;
  /**
   * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
   * @type string | undefined
   */
  cwsu?: NWSCenterWeatherServiceUnitId;
  /**
   * @minLength 101
   * @type integer | undefined
   */
  sequence?: number;
  /**
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @type string | undefined
   */
  observedProperty?: string;
  /**
   * @type string | undefined
   */
  text?: string;
};

export type CenterWeatherServiceUnitJsonLd = Office;

/**
 * @description Date (in YYYY-MM-DD format).
 */
export type _Date = string;

/**
 * @description A geometry represented in Well-Known Text (WKT) format.
 */
export type GeometryString = string | null;

/**
 * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonBoundingBox = number[];

/**
 * @description A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonCoordinate = number[];

export const geoJsonGeometryTypeEnum = {
  Point: 'Point',
} as const;

export type GeoJsonGeometryTypeEnumKey = (typeof geoJsonGeometryTypeEnum)[keyof typeof geoJsonGeometryTypeEnum];

export const geoJsonGeometryTypeEnum2 = {
  LineString: 'LineString',
} as const;

export type GeoJsonGeometryTypeEnum2Key = (typeof geoJsonGeometryTypeEnum2)[keyof typeof geoJsonGeometryTypeEnum2];

export const geoJsonGeometryTypeEnum3 = {
  Polygon: 'Polygon',
} as const;

export type GeoJsonGeometryTypeEnum3Key = (typeof geoJsonGeometryTypeEnum3)[keyof typeof geoJsonGeometryTypeEnum3];

export const geoJsonGeometryTypeEnum4 = {
  MultiPoint: 'MultiPoint',
} as const;

export type GeoJsonGeometryTypeEnum4Key = (typeof geoJsonGeometryTypeEnum4)[keyof typeof geoJsonGeometryTypeEnum4];

export const geoJsonGeometryTypeEnum5 = {
  MultiLineString: 'MultiLineString',
} as const;

export type GeoJsonGeometryTypeEnum5Key = (typeof geoJsonGeometryTypeEnum5)[keyof typeof geoJsonGeometryTypeEnum5];

export const geoJsonGeometryTypeEnum6 = {
  MultiPolygon: 'MultiPolygon',
} as const;

export type GeoJsonGeometryTypeEnum6Key = (typeof geoJsonGeometryTypeEnum6)[keyof typeof geoJsonGeometryTypeEnum6];

/**
 * @description A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonGeometry =
  | (
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnumKey;
          /**
           * @description A GeoJSON coordinate. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array
           */
          coordinates: GeoJsonCoordinate;
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnum2Key;
          /**
           * @description A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array
           */
          coordinates: GeoJsonLineString;
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnum3Key;
          /**
           * @description A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array
           */
          coordinates: GeoJsonPolygon;
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnum4Key;
          /**
           * @type array
           */
          coordinates: GeoJsonCoordinate[];
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnum5Key;
          /**
           * @type array
           */
          coordinates: GeoJsonLineString[];
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
      | {
          /**
           * @type string
           */
          type: GeoJsonGeometryTypeEnum6Key;
          /**
           * @type array
           */
          coordinates: GeoJsonPolygon[];
          /**
           * @description A GeoJSON bounding box. Please refer to IETF RFC 7946 for information on the GeoJSON format.
           * @type array | undefined
           */
          bbox?: GeoJsonBoundingBox;
        }
    )
  | null;

export const geoJsonFeatureTypeEnum = {
  Feature: 'Feature',
} as const;

export type GeoJsonFeatureTypeEnumKey = (typeof geoJsonFeatureTypeEnum)[keyof typeof geoJsonFeatureTypeEnum];

/**
 * @description A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonFeature = {
  '@context'?: JsonLdContext;
  /**
   * @type string | undefined, uri
   */
  id?: string;
  /**
   * @type string
   */
  type: GeoJsonFeatureTypeEnumKey;
  /**
   * @description A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.
   */
  geometry: GeoJsonGeometry | null;
  /**
   * @type object
   */
  properties: object;
};

export const geoJsonFeatureCollectionTypeEnum = {
  FeatureCollection: 'FeatureCollection',
} as const;

export type GeoJsonFeatureCollectionTypeEnumKey =
  (typeof geoJsonFeatureCollectionTypeEnum)[keyof typeof geoJsonFeatureCollectionTypeEnum];

/**
 * @description A GeoJSON feature collection. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonFeatureCollection = {
  '@context'?: JsonLdContext;
  /**
   * @type string
   */
  type: GeoJsonFeatureCollectionTypeEnumKey;
  /**
   * @type array
   */
  features: GeoJsonFeature[];
};

/**
 * @description A GeoJSON line string. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonLineString = GeoJsonCoordinate[];

/**
 * @description A GeoJSON polygon. Please refer to IETF RFC 7946 for information on the GeoJSON format.
 */
export type GeoJsonPolygon = GeoJsonCoordinate[][];

export const gridpointtypeEnum = {
  'wx:Gridpoint': 'wx:Gridpoint',
} as const;

export type GridpointtypeEnumKey = (typeof gridpointtypeEnum)[keyof typeof gridpointtypeEnum];

export const valueCoverageEnum = {
  areas: 'areas',
  brief: 'brief',
  chance: 'chance',
  definite: 'definite',
  few: 'few',
  frequent: 'frequent',
  intermittent: 'intermittent',
  isolated: 'isolated',
  likely: 'likely',
  numerous: 'numerous',
  occasional: 'occasional',
  patchy: 'patchy',
  periods: 'periods',
  scattered: 'scattered',
  slight_chance: 'slight_chance',
  widespread: 'widespread',
} as const;

export type ValueCoverageEnumKey = (typeof valueCoverageEnum)[keyof typeof valueCoverageEnum];

export const valueWeatherEnum = {
  blowing_dust: 'blowing_dust',
  blowing_sand: 'blowing_sand',
  blowing_snow: 'blowing_snow',
  drizzle: 'drizzle',
  fog: 'fog',
  freezing_fog: 'freezing_fog',
  freezing_drizzle: 'freezing_drizzle',
  freezing_rain: 'freezing_rain',
  freezing_spray: 'freezing_spray',
  frost: 'frost',
  hail: 'hail',
  haze: 'haze',
  ice_crystals: 'ice_crystals',
  ice_fog: 'ice_fog',
  rain: 'rain',
  rain_showers: 'rain_showers',
  sleet: 'sleet',
  smoke: 'smoke',
  snow: 'snow',
  snow_showers: 'snow_showers',
  thunderstorms: 'thunderstorms',
  volcanic_ash: 'volcanic_ash',
  water_spouts: 'water_spouts',
} as const;

export type ValueWeatherEnumKey = (typeof valueWeatherEnum)[keyof typeof valueWeatherEnum];

export const valueIntensityEnum = {
  very_light: 'very_light',
  light: 'light',
  moderate: 'moderate',
  heavy: 'heavy',
} as const;

export type ValueIntensityEnumKey = (typeof valueIntensityEnum)[keyof typeof valueIntensityEnum];

export const valueAttributesEnum = {
  damaging_wind: 'damaging_wind',
  dry_thunderstorms: 'dry_thunderstorms',
  flooding: 'flooding',
  gusty_wind: 'gusty_wind',
  heavy_rain: 'heavy_rain',
  large_hail: 'large_hail',
  small_hail: 'small_hail',
  tornadoes: 'tornadoes',
} as const;

export type ValueAttributesEnumKey = (typeof valueAttributesEnum)[keyof typeof valueAttributesEnum];

/**
 * @description Raw forecast data for a 2.5km grid square.\nThis is a list of all potential data layers that may appear. Some layers may not be present in all areas.\n* temperature\n* dewpoint\n* maxTemperature\n* minTemperature\n* relativeHumidity\n* apparentTemperature\n* heatIndex\n* windChill\n* wetBulbGlobeTemperature\n* skyCover\n* windDirection\n* windSpeed\n* windGust\n* weather\n* hazards: Watch and advisory products in effect\n* probabilityOfPrecipitation\n* quantitativePrecipitation\n* iceAccumulation\n* snowfallAmount\n* snowLevel\n* ceilingHeight\n* visibility\n* transportWindSpeed\n* transportWindDirection\n* mixingHeight\n* hainesIndex\n* lightningActivityLevel\n* twentyFootWindSpeed\n* twentyFootWindDirection\n* waveHeight\n* wavePeriod\n* waveDirection\n* primarySwellHeight\n* primarySwellDirection\n* secondarySwellHeight\n* secondarySwellDirection\n* wavePeriod2\n* windWaveHeight\n* dispersionIndex\n* pressure: Barometric pressure\n* probabilityOfTropicalStormWinds\n* probabilityOfHurricaneWinds\n* potentialOf15mphWinds\n* potentialOf25mphWinds\n* potentialOf35mphWinds\n* potentialOf45mphWinds\n* potentialOf20mphWindGusts\n* potentialOf30mphWindGusts\n* potentialOf40mphWindGusts\n* potentialOf50mphWindGusts\n* potentialOf60mphWindGusts\n* grasslandFireDangerIndex\n* probabilityOfThunder\n* davisStabilityIndex\n* atmosphericDispersionIndex\n* lowVisibilityOccurrenceRiskIndex\n* stability\n* redFlagThreatIndex\n
 */
export type Gridpoint = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  '@type'?: GridpointtypeEnumKey;
  /**
   * @type string | undefined, date-time
   */
  updateTime?: string;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  validTimes?: ISO8601Interval;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  elevation?: QuantitativeValue;
  /**
   * @type string | undefined, uri
   */
  forecastOffice?: string;
  /**
   * @type string | undefined
   */
  gridId?: string;
  /**
   * @minLength 0
   * @type integer | undefined
   */
  gridX?: number;
  /**
   * @minLength 0
   * @type integer | undefined
   */
  gridY?: number;
  /**
   * @type object | undefined
   */
  weather?: {
    /**
     * @type array
     */
    values: {
      /**
       * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
       */
      validTime: ISO8601Interval;
      /**
       * @type array
       */
      value: {
        /**
         * @type string
         */
        coverage: ValueCoverageEnumKey | null;
        /**
         * @type string
         */
        weather: ValueWeatherEnumKey | null;
        /**
         * @type string
         */
        intensity: ValueIntensityEnumKey | null;
        /**
         * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
         * @type object
         */
        visibility: QuantitativeValue;
        /**
         * @type array
         */
        attributes: ValueAttributesEnumKey[];
      }[];
    }[];
  };
  /**
   * @type object | undefined
   */
  hazards?: {
    /**
     * @type array
     */
    values: {
      /**
       * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
       */
      validTime: ISO8601Interval;
      /**
       * @type array
       */
      value: {
        /**
         * @description Hazard code. This value will correspond to a P-VTEC phenomenon code as defined in NWS Directive 10-1703.\n
         * @pattern ^\w{2}$
         * @type string
         */
        phenomenon: string;
        /**
         * @description Significance code. This value will correspond to a P-VTEC significance code as defined in NWS Directive 10-1703.\nThis will most frequently be \"A\" for a watch or \"Y\" for an advisory.\n
         * @pattern ^\w$
         * @type string
         */
        significance: string;
        /**
         * @description Event number. If this hazard refers to a national or regional center product (such as a Storm Prediction Center convective watch), this value will be the sequence number of that product.\n
         * @type integer
         */
        event_number: number | null;
      }[];
    }[];
  };
  // Dynamic data layers (quantitative value layers) are stored under `layers`.
  // This prevents the index signature from forcing every known property to match the
  // layer shape, which caused type errors for properties like '@context',
  // 'geometry', 'weather', etc.
  layers?: Record<string, GridpointQuantitativeValueLayer>;
};

/**
 * @description A gridpoint layer consisting of quantitative values (numeric values with associated units of measure).\n
 */
export type GridpointQuantitativeValueLayer = {
  /**
   * @description A string denoting a unit of measure, expressed in the format \"{unit}\" or \"{namespace}:{unit}\".\nUnits with the namespace \"wmo\" or \"wmoUnit\" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.\nUnits with the namespace \"nwsUnit\" are currently custom and do not align to any standard.\nUnits with no namespace or the namespace \"uc\" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).\nNamespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.\n
   * @pattern ^((wmo|uc|wmoUnit|nwsUnit):)?.*$
   * @type string | undefined
   */
  uom?: UnitOfMeasure;
  /**
   * @type array
   */
  values: {
    /**
     * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
     */
    validTime: ISO8601Interval;
    /**
     * @type number
     */
    value: number | null;
  }[];
};

export type GridpointGeoJson = GeoJsonFeature & {
  /**
   * @description Raw forecast data for a 2.5km grid square.\nThis is a list of all potential data layers that may appear. Some layers may not be present in all areas.\n* temperature\n* dewpoint\n* maxTemperature\n* minTemperature\n* relativeHumidity\n* apparentTemperature\n* heatIndex\n* windChill\n* wetBulbGlobeTemperature\n* skyCover\n* windDirection\n* windSpeed\n* windGust\n* weather\n* hazards: Watch and advisory products in effect\n* probabilityOfPrecipitation\n* quantitativePrecipitation\n* iceAccumulation\n* snowfallAmount\n* snowLevel\n* ceilingHeight\n* visibility\n* transportWindSpeed\n* transportWindDirection\n* mixingHeight\n* hainesIndex\n* lightningActivityLevel\n* twentyFootWindSpeed\n* twentyFootWindDirection\n* waveHeight\n* wavePeriod\n* waveDirection\n* primarySwellHeight\n* primarySwellDirection\n* secondarySwellHeight\n* secondarySwellDirection\n* wavePeriod2\n* windWaveHeight\n* dispersionIndex\n* pressure: Barometric pressure\n* probabilityOfTropicalStormWinds\n* probabilityOfHurricaneWinds\n* potentialOf15mphWinds\n* potentialOf25mphWinds\n* potentialOf35mphWinds\n* potentialOf45mphWinds\n* potentialOf20mphWindGusts\n* potentialOf30mphWindGusts\n* potentialOf40mphWindGusts\n* potentialOf50mphWindGusts\n* potentialOf60mphWindGusts\n* grasslandFireDangerIndex\n* probabilityOfThunder\n* davisStabilityIndex\n* atmosphericDispersionIndex\n* lowVisibilityOccurrenceRiskIndex\n* stability\n* redFlagThreatIndex\n
   * @type object | undefined
   */
  properties?: Gridpoint;
};

export type GridpointJsonLd = Gridpoint;

/**
 * @description A multi-day forecast for a 2.5km grid square.
 */
export type Gridpoint12hForecast = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @description Denotes the units used in the textual portions of the forecast.
   * @type string | undefined
   */
  units?: GridpointForecastUnits;
  /**
   * @description The internal generator class used to create the forecast text (used for NWS debugging).
   * @type string | undefined
   */
  forecastGenerator?: string;
  /**
   * @description The time this forecast data was generated.
   * @type string | undefined, date-time
   */
  generatedAt?: string;
  /**
   * @description The last update time of the data this forecast was generated from.
   * @type string | undefined, date-time
   */
  updateTime?: string;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  validTimes?: ISO8601Interval;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  elevation?: QuantitativeValue;
  /**
   * @description An array of forecast periods.
   * @type array | undefined
   */
  periods?: Gridpoint12hForecastPeriod[];
};

/**
 * @description An hourly forecast for a 2.5km grid square.
 */
export type GridpointHourlyForecast = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @description Denotes the units used in the textual portions of the forecast.
   * @type string | undefined
   */
  units?: GridpointForecastUnits;
  /**
   * @description The internal generator class used to create the forecast text (used for NWS debugging).
   * @type string | undefined
   */
  forecastGenerator?: string;
  /**
   * @description The time this forecast data was generated.
   * @type string | undefined, date-time
   */
  generatedAt?: string;
  /**
   * @description The last update time of the data this forecast was generated from.
   * @type string | undefined, date-time
   */
  updateTime?: string;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  validTimes?: ISO8601Interval;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  elevation?: QuantitativeValue;
  /**
   * @description An array of forecast periods.
   * @type array | undefined
   */
  periods?: GridpointHourlyForecastPeriod[];
};

export const gridpointHourlyForecastPeriodTemperatureUnitEnum = {
  F: 'F',
  C: 'C',
} as const;

export type GridpointHourlyForecastPeriodTemperatureUnitEnumKey =
  (typeof gridpointHourlyForecastPeriodTemperatureUnitEnum)[keyof typeof gridpointHourlyForecastPeriodTemperatureUnitEnum];

export const gridpointHourlyForecastPeriodTemperatureTrendEnum = {
  rising: 'rising',
  falling: 'falling',
} as const;

export type GridpointHourlyForecastPeriodTemperatureTrendEnumKey =
  (typeof gridpointHourlyForecastPeriodTemperatureTrendEnum)[keyof typeof gridpointHourlyForecastPeriodTemperatureTrendEnum];

export const gridpointHourlyForecastPeriodWindDirectionEnum = {
  N: 'N',
  NNE: 'NNE',
  NE: 'NE',
  ENE: 'ENE',
  E: 'E',
  ESE: 'ESE',
  SE: 'SE',
  SSE: 'SSE',
  S: 'S',
  SSW: 'SSW',
  SW: 'SW',
  WSW: 'WSW',
  W: 'W',
  WNW: 'WNW',
  NW: 'NW',
  NNW: 'NNW',
} as const;

export type GridpointHourlyForecastPeriodWindDirectionEnumKey =
  (typeof gridpointHourlyForecastPeriodWindDirectionEnum)[keyof typeof gridpointHourlyForecastPeriodWindDirectionEnum];

/**
 * @description An object containing forecast information for a specific time period (generally 12-hour or 1-hour).\n
 */
export type GridpointHourlyForecastPeriod = {
  /**
   * @description Sequential period number.
   * @minLength 1
   * @type integer | undefined
   */
  number?: number;
  /**
   * @description A textual identifier for the period. This value will not be present for hourly forecasts.\n
   * @type string | undefined
   */
  name?: string;
  /**
   * @description The starting time that this forecast period is valid for.
   * @type string | undefined, date-time
   */
  startTime?: string;
  /**
   * @description The ending time that this forecast period is valid for.
   * @type string | undefined, date-time
   */
  endTime?: string;
  /**
   * @description Indicates whether this period is daytime or nighttime.
   * @type boolean | undefined
   */
  isDaytime?: boolean;
  /**
   * @description High/low temperature for the period, depending on whether the period is day or night.\nThis property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.\n
   */
  temperature?: QuantitativeValue | number;
  /**
   * @description The unit of the temperature value (Fahrenheit or Celsius).\nThis property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.\n
   * @deprecated
   * @type string | undefined
   */
  temperatureUnit?: GridpointHourlyForecastPeriodTemperatureUnitEnumKey;
  /**
   * @description If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)\n
   * @type string
   */
  temperatureTrend?: GridpointHourlyForecastPeriodTemperatureTrendEnumKey | null;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  probabilityOfPrecipitation?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  dewpoint?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  relativeHumidity?: QuantitativeValue;
  /**
   * @description Wind speed for the period.\nThis property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.\n
   */
  windSpeed?: QuantitativeValue | string;
  /**
   * @description Peak wind gust for the period.\nThis property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.\n
   */
  windGust?: (QuantitativeValue | string) | null;
  /**
   * @description The prevailing direction of the wind for the period, using a 16-point compass.
   * @type string | undefined
   */
  windDirection?: GridpointHourlyForecastPeriodWindDirectionEnumKey;
  /**
   * @description A link to an icon representing the forecast summary.
   * @deprecated
   * @type string | undefined, uri
   */
  icon?: string;
  /**
   * @description A brief textual forecast summary for the period.
   * @type string | undefined
   */
  shortForecast?: string;
  /**
   * @description A detailed textual forecast for the period.
   * @type string | undefined
   */
  detailedForecast?: string;
};

export const gridpoint12hForecastPeriodTemperatureUnitEnum = {
  F: 'F',
  C: 'C',
} as const;

export type Gridpoint12hForecastPeriodTemperatureUnitEnumKey =
  (typeof gridpoint12hForecastPeriodTemperatureUnitEnum)[keyof typeof gridpoint12hForecastPeriodTemperatureUnitEnum];

export const gridpoint12hForecastPeriodTemperatureTrendEnum = {
  rising: 'rising',
  falling: 'falling',
} as const;

export type Gridpoint12hForecastPeriodTemperatureTrendEnumKey =
  (typeof gridpoint12hForecastPeriodTemperatureTrendEnum)[keyof typeof gridpoint12hForecastPeriodTemperatureTrendEnum];

export const gridpoint12hForecastPeriodWindDirectionEnum = {
  N: 'N',
  NNE: 'NNE',
  NE: 'NE',
  ENE: 'ENE',
  E: 'E',
  ESE: 'ESE',
  SE: 'SE',
  SSE: 'SSE',
  S: 'S',
  SSW: 'SSW',
  SW: 'SW',
  WSW: 'WSW',
  W: 'W',
  WNW: 'WNW',
  NW: 'NW',
  NNW: 'NNW',
} as const;

export type Gridpoint12hForecastPeriodWindDirectionEnumKey =
  (typeof gridpoint12hForecastPeriodWindDirectionEnum)[keyof typeof gridpoint12hForecastPeriodWindDirectionEnum];

/**
 * @description An object containing forecast information for a specific time period (generally 12-hour or 1-hour).\n
 */
export type Gridpoint12hForecastPeriod = {
  /**
   * @description Sequential period number.
   * @minLength 1
   * @type integer | undefined
   */
  number?: number;
  /**
   * @description A textual identifier for the period. This value will not be present for hourly forecasts.\n
   * @type string | undefined
   */
  name?: string;
  /**
   * @description The starting time that this forecast period is valid for.
   * @type string | undefined, date-time
   */
  startTime?: string;
  /**
   * @description The ending time that this forecast period is valid for.
   * @type string | undefined, date-time
   */
  endTime?: string;
  /**
   * @description Indicates whether this period is daytime or nighttime.
   * @type boolean | undefined
   */
  isDaytime?: boolean;
  /**
   * @description High/low temperature for the period, depending on whether the period is day or night.\nThis property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.\n
   */
  temperature?: QuantitativeValue | number;
  /**
   * @description The unit of the temperature value (Fahrenheit or Celsius).\nThis property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request.\n
   * @deprecated
   * @type string | undefined
   */
  temperatureUnit?: Gridpoint12hForecastPeriodTemperatureUnitEnumKey;
  /**
   * @description If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)\n
   * @type string
   */
  temperatureTrend?: Gridpoint12hForecastPeriodTemperatureTrendEnumKey | null;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  probabilityOfPrecipitation?: QuantitativeValue;
  /**
   * @description Wind speed for the period.\nThis property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.\n
   */
  windSpeed?: QuantitativeValue | string;
  /**
   * @description Peak wind gust for the period.\nThis property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request.\n
   */
  windGust?: (QuantitativeValue | string) | null;
  /**
   * @description The prevailing direction of the wind for the period, using a 16-point compass.
   * @type string | undefined
   */
  windDirection?: Gridpoint12hForecastPeriodWindDirectionEnumKey;
  /**
   * @description A link to an icon representing the forecast summary.
   * @deprecated
   * @type string | undefined, uri
   */
  icon?: string;
  /**
   * @description A brief textual forecast summary for the period.
   * @type string | undefined
   */
  shortForecast?: string;
  /**
   * @description A detailed textual forecast for the period.
   * @type string | undefined
   */
  detailedForecast?: string;
};

export const gridpointForecastUnitsEnum = {
  us: 'us',
  si: 'si',
} as const;

export type GridpointForecastUnitsEnumKey = (typeof gridpointForecastUnitsEnum)[keyof typeof gridpointForecastUnitsEnum];

/**
 * @description Denotes the units used in the textual portions of the forecast.
 * @default us
 */
export type GridpointForecastUnits = GridpointForecastUnitsEnumKey;

export type Gridpoint12hForecastGeoJson = GeoJsonFeature & {
  /**
   * @description A multi-day forecast for a 2.5km grid square.
   * @type object | undefined
   */
  properties?: Gridpoint12hForecast;
};

export type GridpointHourlyForecastGeoJson = GeoJsonFeature & {
  /**
   * @description An hourly forecast for a 2.5km grid square.
   * @type object | undefined
   */
  properties?: GridpointHourlyForecast;
};

export type Gridpoint12hForecastJsonLd = Gridpoint12hForecast & {
  '@context': JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string, wkt
   */
  geometry: GeometryString | null;
};

export type GridpointHourlyForecastJsonLd = GridpointHourlyForecast & {
  '@context': JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string, wkt
   */
  geometry: GeometryString | null;
};

/**
 * @description A time duration in ISO 8601 format.
 * @pattern ^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$
 * @example P2DT12H
 */
export type ISO8601Duration = string;

/**
 * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
 */
export type ISO8601Interval = string | string | string;

export type JsonLdContext = any[] | object;

export const landRegionCodeEnum = {
  AR: 'AR',
  CR: 'CR',
  ER: 'ER',
  PR: 'PR',
  SR: 'SR',
  WR: 'WR',
} as const;

export type LandRegionCodeEnumKey = (typeof landRegionCodeEnum)[keyof typeof landRegionCodeEnum];

/**
 * @description Land region code. These correspond to the six NWS regional headquarters:\n* AR: Alaska Region\n* CR: Central Region\n* ER: Eastern Region\n* PR: Pacific Region\n* SR: Southern Region\n* WR: Western Region\n
 */
export type LandRegionCode = LandRegionCodeEnumKey;

export const marineAreaCodeEnum = {
  AM: 'AM',
  AN: 'AN',
  GM: 'GM',
  LC: 'LC',
  LE: 'LE',
  LH: 'LH',
  LM: 'LM',
  LO: 'LO',
  LS: 'LS',
  PH: 'PH',
  PK: 'PK',
  PM: 'PM',
  PS: 'PS',
  PZ: 'PZ',
  SL: 'SL',
} as const;

export type MarineAreaCodeEnumKey = (typeof marineAreaCodeEnum)[keyof typeof marineAreaCodeEnum];

/**
 * @description Marine area code as defined in NWS Directive 10-302:\n* AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean\n* AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC\n* GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL\n* LC: Lake St. Clair\n* LE: Lake Erie\n* LH: Lake Huron\n* LM: Lake Michigan\n* LO: Lake Ontario\n* LS: Lake Superior\n* PH: Central Pacific Ocean including Hawaiian waters\n* PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska\n* PM: Western Pacific Ocean including Mariana Island waters\n* PS: South Central Pacific Ocean including American Samoa waters\n* PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border\n* SL: St. Lawrence River above St. Regis\n
 */
export type MarineAreaCode = MarineAreaCodeEnumKey;

export const marineRegionCodeEnum = {
  AL: 'AL',
  AT: 'AT',
  GL: 'GL',
  GM: 'GM',
  PA: 'PA',
  PI: 'PI',
} as const;

export type MarineRegionCodeEnumKey = (typeof marineRegionCodeEnum)[keyof typeof marineRegionCodeEnum];

/**
 * @description Marine region code. These are groups of marine areas combined.\n* AL: Alaska waters (PK)\n* AT: Atlantic Ocean (AM, AN)\n* GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)\n* GM: Gulf of Mexico (GM)\n* PA: Eastern Pacific Ocean and U.S. West Coast (PZ)\n* PI: Central and Western Pacific (PH, PM, PS)\n
 */
export type MarineRegionCode = MarineRegionCodeEnumKey;

export const metarPhenomenonIntensityEnum = {
  light: 'light',
  heavy: 'heavy',
} as const;

export type MetarPhenomenonIntensityEnumKey = (typeof metarPhenomenonIntensityEnum)[keyof typeof metarPhenomenonIntensityEnum];

export const metarPhenomenonModifierEnum = {
  patches: 'patches',
  blowing: 'blowing',
  low_drifting: 'low_drifting',
  freezing: 'freezing',
  shallow: 'shallow',
  partial: 'partial',
  showers: 'showers',
} as const;

export type MetarPhenomenonModifierEnumKey = (typeof metarPhenomenonModifierEnum)[keyof typeof metarPhenomenonModifierEnum];

export const metarPhenomenonWeatherEnum = {
  fog_mist: 'fog_mist',
  dust_storm: 'dust_storm',
  dust: 'dust',
  drizzle: 'drizzle',
  funnel_cloud: 'funnel_cloud',
  fog: 'fog',
  smoke: 'smoke',
  hail: 'hail',
  snow_pellets: 'snow_pellets',
  haze: 'haze',
  ice_crystals: 'ice_crystals',
  ice_pellets: 'ice_pellets',
  dust_whirls: 'dust_whirls',
  spray: 'spray',
  rain: 'rain',
  sand: 'sand',
  snow_grains: 'snow_grains',
  snow: 'snow',
  squalls: 'squalls',
  sand_storm: 'sand_storm',
  thunderstorms: 'thunderstorms',
  unknown: 'unknown',
  volcanic_ash: 'volcanic_ash',
} as const;

export type MetarPhenomenonWeatherEnumKey = (typeof metarPhenomenonWeatherEnum)[keyof typeof metarPhenomenonWeatherEnum];

/**
 * @description An object representing a decoded METAR phenomenon string.
 */
export type MetarPhenomenon = {
  /**
   * @type string
   */
  intensity: MetarPhenomenonIntensityEnumKey | null;
  /**
   * @type string
   */
  modifier: MetarPhenomenonModifierEnumKey | null;
  /**
   * @type string
   */
  weather: MetarPhenomenonWeatherEnumKey;
  /**
   * @type string
   */
  rawString: string;
  /**
   * @type boolean | undefined
   */
  inVicinity?: boolean;
};

export const metarSkyCoverageEnum = {
  OVC: 'OVC',
  BKN: 'BKN',
  SCT: 'SCT',
  FEW: 'FEW',
  SKC: 'SKC',
  CLR: 'CLR',
  VV: 'VV',
} as const;

export type MetarSkyCoverageEnumKey = (typeof metarSkyCoverageEnum)[keyof typeof metarSkyCoverageEnum];

export type MetarSkyCoverage = MetarSkyCoverageEnumKey;

export const NWSCenterWeatherServiceUnitIdEnum = {
  ZAB: 'ZAB',
  ZAN: 'ZAN',
  ZAU: 'ZAU',
  ZBW: 'ZBW',
  ZDC: 'ZDC',
  ZDV: 'ZDV',
  ZFA: 'ZFA',
  ZFW: 'ZFW',
  ZHU: 'ZHU',
  ZID: 'ZID',
  ZJX: 'ZJX',
  ZKC: 'ZKC',
  ZLA: 'ZLA',
  ZLC: 'ZLC',
  ZMA: 'ZMA',
  ZME: 'ZME',
  ZMP: 'ZMP',
  ZNY: 'ZNY',
  ZOA: 'ZOA',
  ZOB: 'ZOB',
  ZSE: 'ZSE',
  ZTL: 'ZTL',
} as const;

export type NWSCenterWeatherServiceUnitIdEnumKey =
  (typeof NWSCenterWeatherServiceUnitIdEnum)[keyof typeof NWSCenterWeatherServiceUnitIdEnum];

/**
 * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
 */
export type NWSCenterWeatherServiceUnitId = NWSCenterWeatherServiceUnitIdEnumKey;

export const NWSForecastOfficeIdEnum = {
  AKQ: 'AKQ',
  ALY: 'ALY',
  BGM: 'BGM',
  BOX: 'BOX',
  BTV: 'BTV',
  BUF: 'BUF',
  CAE: 'CAE',
  CAR: 'CAR',
  CHS: 'CHS',
  CLE: 'CLE',
  CTP: 'CTP',
  GSP: 'GSP',
  GYX: 'GYX',
  ILM: 'ILM',
  ILN: 'ILN',
  LWX: 'LWX',
  MHX: 'MHX',
  OKX: 'OKX',
  PBZ: 'PBZ',
  PHI: 'PHI',
  RAH: 'RAH',
  RLX: 'RLX',
  RNK: 'RNK',
  ABQ: 'ABQ',
  AMA: 'AMA',
  BMX: 'BMX',
  BRO: 'BRO',
  CRP: 'CRP',
  EPZ: 'EPZ',
  EWX: 'EWX',
  FFC: 'FFC',
  FWD: 'FWD',
  HGX: 'HGX',
  HUN: 'HUN',
  JAN: 'JAN',
  JAX: 'JAX',
  KEY: 'KEY',
  LCH: 'LCH',
  LIX: 'LIX',
  LUB: 'LUB',
  LZK: 'LZK',
  MAF: 'MAF',
  MEG: 'MEG',
  MFL: 'MFL',
  MLB: 'MLB',
  MOB: 'MOB',
  MRX: 'MRX',
  OHX: 'OHX',
  OUN: 'OUN',
  SHV: 'SHV',
  SJT: 'SJT',
  SJU: 'SJU',
  TAE: 'TAE',
  TBW: 'TBW',
  TSA: 'TSA',
  ABR: 'ABR',
  APX: 'APX',
  ARX: 'ARX',
  BIS: 'BIS',
  BOU: 'BOU',
  CYS: 'CYS',
  DDC: 'DDC',
  DLH: 'DLH',
  DMX: 'DMX',
  DTX: 'DTX',
  DVN: 'DVN',
  EAX: 'EAX',
  FGF: 'FGF',
  FSD: 'FSD',
  GID: 'GID',
  GJT: 'GJT',
  GLD: 'GLD',
  GRB: 'GRB',
  GRR: 'GRR',
  ICT: 'ICT',
  ILX: 'ILX',
  IND: 'IND',
  IWX: 'IWX',
  JKL: 'JKL',
  LBF: 'LBF',
  LMK: 'LMK',
  LOT: 'LOT',
  LSX: 'LSX',
  MKX: 'MKX',
  MPX: 'MPX',
  MQT: 'MQT',
  OAX: 'OAX',
  PAH: 'PAH',
  PUB: 'PUB',
  RIW: 'RIW',
  SGF: 'SGF',
  TOP: 'TOP',
  UNR: 'UNR',
  BOI: 'BOI',
  BYZ: 'BYZ',
  EKA: 'EKA',
  FGZ: 'FGZ',
  GGW: 'GGW',
  HNX: 'HNX',
  LKN: 'LKN',
  LOX: 'LOX',
  MFR: 'MFR',
  MSO: 'MSO',
  MTR: 'MTR',
  OTX: 'OTX',
  PDT: 'PDT',
  PIH: 'PIH',
  PQR: 'PQR',
  PSR: 'PSR',
  REV: 'REV',
  SEW: 'SEW',
  SGX: 'SGX',
  SLC: 'SLC',
  STO: 'STO',
  TFX: 'TFX',
  TWC: 'TWC',
  VEF: 'VEF',
  AER: 'AER',
  AFC: 'AFC',
  AFG: 'AFG',
  AJK: 'AJK',
  ALU: 'ALU',
  GUM: 'GUM',
  HPA: 'HPA',
  HFO: 'HFO',
  PPG: 'PPG',
  STU: 'STU',
  NH1: 'NH1',
  NH2: 'NH2',
  ONA: 'ONA',
  ONP: 'ONP',
} as const;

export type NWSForecastOfficeIdEnumKey = (typeof NWSForecastOfficeIdEnum)[keyof typeof NWSForecastOfficeIdEnum];

/**
 * @description Three-letter identifier for a NWS office.
 */
export type NWSForecastOfficeId = NWSForecastOfficeIdEnumKey;

export const NWSNationalHQIdEnum = {
  NWS: 'NWS',
} as const;

export type NWSNationalHQIdEnumKey = (typeof NWSNationalHQIdEnum)[keyof typeof NWSNationalHQIdEnum];

/**
 * @description Three-letter identifier for NWS National HQ.
 */
export type NWSNationalHQId = NWSNationalHQIdEnumKey;

export type NWSOfficeId = NWSForecastOfficeId | NWSRegionalHQId | NWSNationalHQId;

export const NWSRegionalHQIdEnum = {
  ARH: 'ARH',
  CRH: 'CRH',
  ERH: 'ERH',
  PRH: 'PRH',
  SRH: 'SRH',
  WRH: 'WRH',
} as const;

export type NWSRegionalHQIdEnumKey = (typeof NWSRegionalHQIdEnum)[keyof typeof NWSRegionalHQIdEnum];

/**
 * @description Three-letter identifier for a NWS Regional HQ.
 */
export type NWSRegionalHQId = NWSRegionalHQIdEnumKey;

/**
 * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
 * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
 */
export type NWSZoneID = string;

export const NWSZoneTypeEnum = {
  land: 'land',
  marine: 'marine',
  forecast: 'forecast',
  public: 'public',
  coastal: 'coastal',
  offshore: 'offshore',
  fire: 'fire',
  county: 'county',
} as const;

export type NWSZoneTypeEnumKey = (typeof NWSZoneTypeEnum)[keyof typeof NWSZoneTypeEnum];

export type NWSZoneType = NWSZoneTypeEnumKey;

export const observationtypeEnum = {
  'wx:ObservationStation': 'wx:ObservationStation',
} as const;

export type ObservationtypeEnumKey = (typeof observationtypeEnum)[keyof typeof observationtypeEnum];

export type Observation = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  '@type'?: ObservationtypeEnumKey;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  elevation?: QuantitativeValue;
  /**
   * @type string | undefined, uri
   */
  station?: string;
  /**
   * @type string | undefined, date-time
   */
  timestamp?: string;
  /**
   * @type string | undefined
   */
  rawMessage?: string;
  /**
   * @type string | undefined
   */
  textDescription?: string;
  /**
   * @deprecated
   * @type string, uri
   */
  icon?: string | null;
  /**
   * @type array | undefined
   */
  presentWeather?: MetarPhenomenon[];
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  temperature?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  dewpoint?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  windDirection?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  windSpeed?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  windGust?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  barometricPressure?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  seaLevelPressure?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  visibility?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  maxTemperatureLast24Hours?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  minTemperatureLast24Hours?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  precipitationLastHour?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  precipitationLast3Hours?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  precipitationLast6Hours?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  relativeHumidity?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  windChill?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  heatIndex?: QuantitativeValue;
  /**
   * @type array
   */
  cloudLayers?:
    | {
        /**
         * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
         * @type object
         */
        base: QuantitativeValue;
        /**
         * @type string
         */
        amount: MetarSkyCoverage;
      }[]
    | null;
};

export type ObservationGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: Observation;
};

export type ObservationJsonLd = Observation;

export type ObservationCollectionGeoJson = GeoJsonFeatureCollection & {
  /**
   * @type array | undefined
   */
  features?: {
    /**
     * @type object | undefined
     */
    properties?: Observation;
  }[];
};

export type ObservationCollectionJsonLd = {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: Observation[];
};

export const observationStationtypeEnum = {
  'wx:ObservationStation': 'wx:ObservationStation',
} as const;

export type ObservationStationtypeEnumKey = (typeof observationStationtypeEnum)[keyof typeof observationStationtypeEnum];

export type ObservationStation = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  '@type'?: ObservationStationtypeEnumKey;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  elevation?: QuantitativeValue;
  /**
   * @type string | undefined
   */
  stationIdentifier?: string;
  /**
   * @type string | undefined
   */
  name?: string;
  /**
   * @type string | undefined, iana-time-zone-identifier
   */
  timeZone?: string;
  /**
   * @description The data provider for this station. E.g., \"ASOS,\" \"MesoWest,\" etc.
   * @type string | undefined
   */
  provider?: string;
  /**
   * @description The sub-provider of for this station. E.g., \"FAA,\" \"DOT,\" etc.
   * @type string | undefined
   */
  subProvider?: string;
  /**
   * @description A link to the NWS public forecast zone containing this station.
   * @type string | undefined, uri
   */
  forecast?: string;
  /**
   * @description A link to the NWS county zone containing this station.
   * @type string | undefined, uri
   */
  county?: string;
  /**
   * @description A link to the NWS fire weather forecast zone containing this station.
   * @type string | undefined, uri
   */
  fireWeatherZone?: string;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  distance?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  bearing?: QuantitativeValue;
};

export type ObservationStationGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: ObservationStation;
};

export type ObservationStationJsonLd = ObservationStation & {
  '@context': JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string, wkt
   */
  geometry: GeometryString | null;
};

export type ObservationStationCollectionGeoJson = GeoJsonFeatureCollection & {
  /**
   * @type array | undefined
   */
  features?: {
    /**
     * @type object | undefined
     */
    properties?: ObservationStation;
  }[];
  /**
   * @type array | undefined
   */
  observationStations?: string[];
  /**
   * @description Links for retrieving more data from paged data sets
   * @type object | undefined
   */
  pagination?: PaginationInfo;
};

export type ObservationStationCollectionJsonLd = {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: ObservationStation[];
  /**
   * @type array | undefined
   */
  observationStations?: string[];
  /**
   * @description Links for retrieving more data from paged data sets
   * @type object | undefined
   */
  pagination?: PaginationInfo;
};

export const officetypeEnum = {
  GovernmentOrganization: 'GovernmentOrganization',
} as const;

export type OfficetypeEnumKey = (typeof officetypeEnum)[keyof typeof officetypeEnum];

export const addresstypeEnum = {
  PostalAddress: 'PostalAddress',
} as const;

export type AddresstypeEnumKey = (typeof addresstypeEnum)[keyof typeof addresstypeEnum];

export type Office = {
  '@context'?: JsonLdContext;
  /**
   * @type string | undefined
   */
  '@type'?: OfficetypeEnumKey;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined
   */
  name?: string;
  /**
   * @type object | undefined
   */
  address?: {
    /**
     * @type string | undefined
     */
    '@type'?: AddresstypeEnumKey;
    /**
     * @type string | undefined
     */
    streetAddress?: string;
    /**
     * @type string | undefined
     */
    addressLocality?: string;
    /**
     * @type string | undefined
     */
    addressRegion?: string;
    /**
     * @type string | undefined
     */
    postalCode?: string;
  };
  /**
   * @type string | undefined
   */
  telephone?: string;
  /**
   * @type string | undefined
   */
  faxNumber?: string;
  /**
   * @type string | undefined
   */
  email?: string;
  /**
   * @type string | undefined, uri
   */
  sameAs?: string;
  /**
   * @type string | undefined
   */
  nwsRegion?: string;
  /**
   * @type string | undefined, uri
   */
  parentOrganization?: string;
  /**
   * @type array | undefined
   */
  responsibleCounties?: string[];
  /**
   * @type array | undefined
   */
  responsibleForecastZones?: string[];
  /**
   * @type array | undefined
   */
  responsibleFireZones?: string[];
  /**
   * @type array | undefined
   */
  approvedObservationStations?: string[];
};

export type OfficeHeadline = {
  '@context'?: JsonLdContext;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined, uri
   */
  office?: string;
  /**
   * @type boolean | undefined
   */
  important?: boolean;
  /**
   * @type string | undefined, date-time
   */
  issuanceTime?: string;
  /**
   * @type string | undefined, uri
   */
  link?: string;
  /**
   * @type string | undefined
   */
  name?: string;
  /**
   * @type string | undefined
   */
  title?: string;
  /**
   * @type string
   */
  summary?: string | null;
  /**
   * @type string | undefined
   */
  content?: string;
};

export type OfficeHeadlineCollection = {
  '@context': JsonLdContext;
  /**
   * @type array
   */
  '@graph': OfficeHeadline[];
};

/**
 * @description Links for retrieving more data from paged data sets
 */
export type PaginationInfo = {
  /**
   * @description A link to the next page of records
   * @type string, uri
   */
  next: string;
};

export const pointtypeEnum = {
  'wx:Point': 'wx:Point',
} as const;

export type PointtypeEnumKey = (typeof pointtypeEnum)[keyof typeof pointtypeEnum];

export type Point = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  '@type'?: PointtypeEnumKey;
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string | undefined
   */
  cwa?: NWSForecastOfficeId;
  /**
   * @type string | undefined, uri
   */
  forecastOffice?: string;
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string | undefined
   */
  gridId?: NWSForecastOfficeId;
  /**
   * @minLength 0
   * @type integer | undefined
   */
  gridX?: number;
  /**
   * @minLength 0
   * @type integer | undefined
   */
  gridY?: number;
  /**
   * @type string | undefined, uri
   */
  forecast?: string;
  /**
   * @type string | undefined, uri
   */
  forecastHourly?: string;
  /**
   * @type string | undefined, uri
   */
  forecastGridData?: string;
  /**
   * @type string | undefined, uri
   */
  observationStations?: string;
  relativeLocation?: RelativeLocationGeoJson | RelativeLocationJsonLd;
  /**
   * @type string | undefined, uri
   */
  forecastZone?: string;
  /**
   * @type string | undefined, uri
   */
  county?: string;
  /**
   * @type string | undefined, uri
   */
  fireWeatherZone?: string;
  /**
   * @type string | undefined
   */
  timeZone?: string;
  /**
   * @type string | undefined
   */
  radarStation?: string;
};

export type PointGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: Point;
};

export type PointJsonLd = Point & {
  '@context': JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string, wkt
   */
  geometry: GeometryString | null;
};

/**
 * @pattern ^(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?)$
 */
export type PointString = string;

/**
 * @description Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).
 */
export type ProblemDetail = {
  /**
   * @description A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.\n
   * @default "about:blank"
   * @type string, uri
   */
  type: string;
  /**
   * @description A short, human-readable summary of the problem type.
   * @type string
   */
  title: string;
  /**
   * @description The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.\n
   * @minLength 100
   * @maxLength 999
   * @type number
   */
  status: number;
  /**
   * @description A human-readable explanation specific to this occurrence of the problem.
   * @type string
   */
  detail: string;
  /**
   * @description A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.\n
   * @type string, uri
   */
  instance: string;
  /**
   * @description A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.\n
   * @type string
   */
  correlationId: string;
  [key: string]: any;
};

export const quantitativeValueQualityControlEnum = {
  Z: 'Z',
  C: 'C',
  S: 'S',
  V: 'V',
  X: 'X',
  Q: 'Q',
  G: 'G',
  B: 'B',
  T: 'T',
} as const;

export type QuantitativeValueQualityControlEnumKey =
  (typeof quantitativeValueQualityControlEnum)[keyof typeof quantitativeValueQualityControlEnum];

/**
 * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
 */
export type QuantitativeValue = {
  /**
   * @description A measured value
   * @type number
   */
  value?: number | null;
  /**
   * @description The maximum value of a range of measured values
   * @type number | undefined
   */
  maxValue?: number;
  /**
   * @description The minimum value of a range of measured values
   * @type number | undefined
   */
  minValue?: number;
  /**
   * @description A string denoting a unit of measure, expressed in the format \"{unit}\" or \"{namespace}:{unit}\".\nUnits with the namespace \"wmo\" or \"wmoUnit\" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.\nUnits with the namespace \"nwsUnit\" are currently custom and do not align to any standard.\nUnits with no namespace or the namespace \"uc\" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).\nNamespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.\n
   * @pattern ^((wmo|uc|wmoUnit|nwsUnit):)?.*$
   * @type string | undefined
   */
  unitCode?: UnitOfMeasure;
  /**
   * @description For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml\n
   * @type string | undefined
   */
  qualityControl?: QuantitativeValueQualityControlEnumKey;
};

export type RegionCode = LandRegionCode | MarineRegionCode;

export type RelativeLocation = {
  /**
   * @type string | undefined
   */
  city?: string;
  /**
   * @type string | undefined
   */
  state?: string;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  distance?: QuantitativeValue;
  /**
   * @description A structured value representing a measurement and its unit of measure. This object is a slightly modified version of the schema.org definition at https://schema.org/QuantitativeValue\n
   * @type object | undefined
   */
  bearing?: QuantitativeValue;
};

export type RelativeLocationGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: RelativeLocation;
};

export type RelativeLocationJsonLd = RelativeLocation & {
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string, wkt
   */
  geometry: GeometryString | null;
};

export type Sigmet = {
  /**
   * @type string | undefined, uri
   */
  id?: string;
  /**
   * @type string | undefined, date-time
   */
  issueTime?: string;
  /**
   * @type string
   */
  fir?: string | null;
  /**
   * @description ATSU Identifier
   * @pattern ^[A-Z]{3,4}$
   * @type string | undefined
   */
  atsu?: ATSUIdentifier;
  /**
   * @type string
   */
  sequence?: string | null;
  /**
   * @type string, uri
   */
  phenomenon?: string | null;
  /**
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @type string | undefined, date-time
   */
  end?: string;
};

export type SigmetCollectionGeoJson = GeoJsonFeatureCollection & {
  /**
   * @type array | undefined
   */
  features?: SigmetGeoJson[];
};

export type SigmetGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: Sigmet;
};

export type SigmetSequenceNumber = string;

export const stateTerritoryCodeEnum = {
  AL: 'AL',
  AK: 'AK',
  AS: 'AS',
  AR: 'AR',
  AZ: 'AZ',
  CA: 'CA',
  CO: 'CO',
  CT: 'CT',
  DE: 'DE',
  DC: 'DC',
  FL: 'FL',
  GA: 'GA',
  GU: 'GU',
  HI: 'HI',
  ID: 'ID',
  IL: 'IL',
  IN: 'IN',
  IA: 'IA',
  KS: 'KS',
  KY: 'KY',
  LA: 'LA',
  ME: 'ME',
  MD: 'MD',
  MA: 'MA',
  MI: 'MI',
  MN: 'MN',
  MS: 'MS',
  MO: 'MO',
  MT: 'MT',
  NE: 'NE',
  NV: 'NV',
  NH: 'NH',
  NJ: 'NJ',
  NM: 'NM',
  NY: 'NY',
  NC: 'NC',
  ND: 'ND',
  OH: 'OH',
  OK: 'OK',
  OR: 'OR',
  PA: 'PA',
  PR: 'PR',
  RI: 'RI',
  SC: 'SC',
  SD: 'SD',
  TN: 'TN',
  TX: 'TX',
  UT: 'UT',
  VT: 'VT',
  VI: 'VI',
  VA: 'VA',
  WA: 'WA',
  WV: 'WV',
  WI: 'WI',
  WY: 'WY',
  MP: 'MP',
  PW: 'PW',
  FM: 'FM',
  MH: 'MH',
} as const;

export type StateTerritoryCodeEnumKey = (typeof stateTerritoryCodeEnum)[keyof typeof stateTerritoryCodeEnum];

export type StateTerritoryCode = StateTerritoryCodeEnumKey;

export type TextProduct = {
  '@context'?: JsonLdContext;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  id?: string;
  /**
   * @type string | undefined
   */
  wmoCollectiveId?: string;
  /**
   * @type string | undefined
   */
  issuingOffice?: string;
  /**
   * @type string | undefined, date-time
   */
  issuanceTime?: string;
  /**
   * @type string | undefined
   */
  productCode?: string;
  /**
   * @type string | undefined
   */
  productName?: string;
  /**
   * @type string | undefined
   */
  productText?: string;
};

export type TextProductCollection = {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: TextProduct[];
};

export type TextProductTypeCollection = {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: {
    /**
     * @type string
     */
    productCode: string;
    /**
     * @type string
     */
    productName: string;
  }[];
};

export type TextProductLocationCollection = {
  '@context'?: JsonLdContext;
  /**
   * @type object | undefined
   */
  locations?: {
    [key: string]: string | null;
  };
};

/**
 * @description A time (in HHMM format). This is always specified in UTC (Zulu) time.
 * @pattern ^([01][0-9]|2[0-3])[0-5][0-9]$
 */
export type Time = string;

/**
 * @description A string denoting a unit of measure, expressed in the format \"{unit}\" or \"{namespace}:{unit}\".\nUnits with the namespace \"wmo\" or \"wmoUnit\" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}.\nUnits with the namespace \"nwsUnit\" are currently custom and do not align to any standard.\nUnits with no namespace or the namespace \"uc\" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156).\nNamespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future.\n
 * @pattern ^((wmo|uc|wmoUnit|nwsUnit):)?.*$
 */
export type UnitOfMeasure = string;

export const zonetypeEnum = {
  'wx:Zone': 'wx:Zone',
} as const;

export type ZonetypeEnumKey = (typeof zonetypeEnum)[keyof typeof zonetypeEnum];

export const zoneStateEnum = {} as const;

export type ZoneStateEnumKey = (typeof zoneStateEnum)[keyof typeof zoneStateEnum];

export type Zone = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @type string | undefined, uri
   */
  '@id'?: string;
  /**
   * @type string | undefined
   */
  '@type'?: ZonetypeEnumKey;
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string | undefined
   */
  id?: NWSZoneID;
  /**
   * @type string | undefined
   */
  type?: NWSZoneType;
  /**
   * @type string | undefined
   */
  name?: string;
  /**
   * @type string | undefined, date-time
   */
  effectiveDate?: string;
  /**
   * @type string | undefined, date-time
   */
  expirationDate?: string;
  state?: StateTerritoryCode | ZoneStateEnumKey;
  /**
   * @type string | undefined, uri
   */
  forecastOffice?: string;
  /**
   * @type string | undefined
   */
  gridIdentifier?: string;
  /**
   * @type string | undefined
   */
  awipsLocationIdentifier?: string;
  /**
   * @deprecated
   * @type array | undefined
   */
  cwa?: NWSForecastOfficeId[];
  /**
   * @deprecated
   * @type array | undefined
   */
  forecastOffices?: string[];
  /**
   * @type array | undefined
   */
  timeZone?: string[];
  /**
   * @type array | undefined
   */
  observationStations?: string[];
  /**
   * @type string
   */
  radarStation?: string | null;
};

export type ZoneGeoJson = GeoJsonFeature & {
  /**
   * @type object | undefined
   */
  properties?: Zone;
};

export type ZoneJsonLd = Zone;

export type ZoneCollectionGeoJson = GeoJsonFeatureCollection & {
  /**
   * @type array | undefined
   */
  features?: {
    /**
     * @type object | undefined
     */
    properties?: Zone;
  }[];
};

export type ZoneCollectionJsonLd = {
  '@context'?: JsonLdContext;
  /**
   * @type array | undefined
   */
  '@graph'?: Zone[];
};

/**
 * @description An object representing a zone area forecast.
 */
export type ZoneForecast = {
  '@context'?: JsonLdContext;
  /**
   * @description A geometry represented in Well-Known Text (WKT) format.
   * @type string | undefined, wkt
   */
  geometry?: GeometryString | null;
  /**
   * @description An API link to the zone this forecast is for.
   * @type string | undefined, uri
   */
  zone?: string;
  /**
   * @description The time this zone forecast product was published.
   * @type string | undefined, date-time
   */
  updated?: string;
  /**
   * @description An array of forecast periods.
   * @type array | undefined
   */
  periods?: {
    /**
     * @description A sequential identifier number.
     * @type integer
     */
    number: number;
    /**
     * @description A textual description of the period.
     * @type string
     */
    name: string;
    /**
     * @description A detailed textual forecast for the period.
     * @type string
     */
    detailedForecast: string;
  }[];
};

export type ZoneForecastGeoJson = GeoJsonFeature & {
  /**
   * @description An object representing a zone area forecast.
   * @type object | undefined
   */
  properties?: ZoneForecast;
};

export type ZoneForecastJsonLd = ZoneForecast;

export type Error = ProblemDetail;

export type ObservationCollection = ObservationCollectionGeoJson;

export type ObservationStationCollection = ObservationStationCollectionGeoJson;

export const alertsQueryQueryParamsStatusEnum = {
  actual: 'actual',
  exercise: 'exercise',
  system: 'system',
  test: 'test',
  draft: 'draft',
} as const;

export type AlertsQueryQueryParamsStatusEnumKey =
  (typeof alertsQueryQueryParamsStatusEnum)[keyof typeof alertsQueryQueryParamsStatusEnum];

export const alertsQueryQueryParamsMessageTypeEnum = {
  alert: 'alert',
  update: 'update',
  cancel: 'cancel',
} as const;

export type AlertsQueryQueryParamsMessageTypeEnumKey =
  (typeof alertsQueryQueryParamsMessageTypeEnum)[keyof typeof alertsQueryQueryParamsMessageTypeEnum];

export const alertsQueryQueryParamsRegionTypeEnum = {
  land: 'land',
  marine: 'marine',
} as const;

export type AlertsQueryQueryParamsRegionTypeEnumKey =
  (typeof alertsQueryQueryParamsRegionTypeEnum)[keyof typeof alertsQueryQueryParamsRegionTypeEnum];

export type AlertsQueryQueryParams = {
  /**
   * @description List only active alerts (use /alerts/active endpoints instead)
   * @type boolean | undefined
   */
  active?: boolean;
  /**
   * @description Start time
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @description End time
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @description Status (actual, exercise, system, test, draft)
   * @type array | undefined
   */
  status?: AlertsQueryQueryParamsStatusEnumKey[];
  /**
   * @description Message type (alert, update, cancel)
   * @type array | undefined
   */
  message_type?: AlertsQueryQueryParamsMessageTypeEnumKey[];
  /**
   * @description Event name
   * @type array | undefined
   */
  event?: string[];
  /**
   * @description Event code
   * @type array | undefined
   */
  code?: string[];
  /**
   * @description State/territory code or marine area code\nThis parameter is incompatible with the following parameters: point, region, region_type, zone\n
   * @type array | undefined
   */
  area?: AreaCode[];
  /**
   * @description Point (latitude,longitude)\nThis parameter is incompatible with the following parameters: area, region, region_type, zone\n
   * @pattern ^(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?)$
   * @type string | undefined
   */
  point?: PointString;
  /**
   * @description Marine region code\nThis parameter is incompatible with the following parameters: area, point, region_type, zone\n
   * @type array | undefined
   */
  region?: MarineRegionCode[];
  /**
   * @description Region type (land or marine)\nThis parameter is incompatible with the following parameters: area, point, region, zone\n
   * @type string | undefined
   */
  region_type?: AlertsQueryQueryParamsRegionTypeEnumKey;
  /**
   * @description Zone ID (forecast or county)\nThis parameter is incompatible with the following parameters: area, point, region, region_type\n
   * @type array | undefined
   */
  zone?: Array<NWSZoneID | string>;
  /**
   * @description Urgency (immediate, expected, future, past, unknown)
   * @type array | undefined
   */
  urgency?: AlertUrgency[];
  /**
   * @description Severity (extreme, severe, moderate, minor, unknown)
   * @type array | undefined
   */
  severity?: AlertSeverity[];
  /**
   * @description Certainty (observed, likely, possible, unlikely, unknown)
   * @type array | undefined
   */
  certainty?: AlertCertainty[];
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @default 500
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description Pagination cursor
   * @type string | undefined
   */
  cursor?: string;
};

/**
 * @description A collection of alerts.
 */
export type AlertsQuery200 = AlertCollectionGeoJson;

/**
 * @description Certain common queries may be redirected to discrete URLs
 */
export type AlertsQuery301 = any;

/**
 * @description An error response.
 */
export type AlertsQueryError = ProblemDetail;

export type AlertsQueryQueryResponse = AlertsQuery200;

export type AlertsQueryQuery = {
  Response: AlertsQuery200;
  QueryParams: AlertsQueryQueryParams;
  Errors: any;
};

export const alertsActiveQueryParamsStatusEnum = {
  actual: 'actual',
  exercise: 'exercise',
  system: 'system',
  test: 'test',
  draft: 'draft',
} as const;

export type AlertsActiveQueryParamsStatusEnumKey =
  (typeof alertsActiveQueryParamsStatusEnum)[keyof typeof alertsActiveQueryParamsStatusEnum];

export const alertsActiveQueryParamsMessageTypeEnum = {
  alert: 'alert',
  update: 'update',
  cancel: 'cancel',
} as const;

export type AlertsActiveQueryParamsMessageTypeEnumKey =
  (typeof alertsActiveQueryParamsMessageTypeEnum)[keyof typeof alertsActiveQueryParamsMessageTypeEnum];

export const alertsActiveQueryParamsRegionTypeEnum = {
  land: 'land',
  marine: 'marine',
} as const;

export type AlertsActiveQueryParamsRegionTypeEnumKey =
  (typeof alertsActiveQueryParamsRegionTypeEnum)[keyof typeof alertsActiveQueryParamsRegionTypeEnum];

export type AlertsActiveQueryParams = {
  /**
   * @description Status (actual, exercise, system, test, draft)
   * @type array | undefined
   */
  status?: AlertsActiveQueryParamsStatusEnumKey[];
  /**
   * @description Message type (alert, update, cancel)
   * @type array | undefined
   */
  message_type?: AlertsActiveQueryParamsMessageTypeEnumKey[];
  /**
   * @description Event name
   * @type array | undefined
   */
  event?: string[];
  /**
   * @description Event code
   * @type array | undefined
   */
  code?: string[];
  /**
   * @description State/territory code or marine area code\nThis parameter is incompatible with the following parameters: point, region, region_type, zone\n
   * @type array | undefined
   */
  area?: AreaCode[];
  /**
   * @description Point (latitude,longitude)\nThis parameter is incompatible with the following parameters: area, region, region_type, zone\n
   * @pattern ^(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?)$
   * @type string | undefined
   */
  point?: PointString;
  /**
   * @description Marine region code\nThis parameter is incompatible with the following parameters: area, point, region_type, zone\n
   * @type array | undefined
   */
  region?: MarineRegionCode[];
  /**
   * @description Region type (land or marine)\nThis parameter is incompatible with the following parameters: area, point, region, zone\n
   * @type string | undefined
   */
  region_type?: AlertsActiveQueryParamsRegionTypeEnumKey;
  /**
   * @description Zone ID (forecast or county)\nThis parameter is incompatible with the following parameters: area, point, region, region_type\n
   * @type array | undefined
   */
  zone?: Array<NWSZoneID | string>;
  /**
   * @description Urgency (immediate, expected, future, past, unknown)
   * @type array | undefined
   */
  urgency?: AlertUrgency[];
  /**
   * @description Severity (extreme, severe, moderate, minor, unknown)
   * @type array | undefined
   */
  severity?: AlertSeverity[];
  /**
   * @description Certainty (observed, likely, possible, unlikely, unknown)
   * @type array | undefined
   */
  certainty?: AlertCertainty[];
};

/**
 * @description A collection of alerts.
 */
export type AlertsActive200 = AlertCollectionGeoJson;

/**
 * @description Certain common queries may be redirected to discrete URLs
 */
export type AlertsActive301 = any;

/**
 * @description An error response.
 */
export type AlertsActiveError = ProblemDetail;

export type AlertsActiveQueryResponse = AlertsActive200;

export type AlertsActiveQuery = {
  Response: AlertsActive200;
  QueryParams: AlertsActiveQueryParams;
  Errors: any;
};

/**
 * @description A data structure showing the counts of active alerts broken down by various categories
 */
export type AlertsActiveCount200 = {
  /**
   * @description The total number of active alerts
   * @minLength 0
   * @type integer | undefined
   */
  total?: number;
  /**
   * @description The total number of active alerts affecting land zones
   * @minLength 0
   * @type integer | undefined
   */
  land?: number;
  /**
   * @description The total number of active alerts affecting marine zones
   * @minLength 0
   * @type integer | undefined
   */
  marine?: number;
  /**
   * @description Active alerts by marine region
   * @type object | undefined
   */
  regions?: {
    [key: string]: number;
  };
  /**
   * @description Active alerts by area (state/territory)
   * @type object | undefined
   */
  areas?: {
    [key: string]: number;
  };
  /**
   * @description Active alerts by NWS public zone or county code
   * @type object | undefined
   */
  zones?: {
    [key: string]: number;
  };
};

/**
 * @description An error response.
 */
export type AlertsActiveCountError = ProblemDetail;

export type AlertsActiveCountQueryResponse = AlertsActiveCount200;

export type AlertsActiveCountQuery = {
  Response: AlertsActiveCount200;
  Errors: any;
};

export type AlertsActiveZonePathParams = {
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string
   */
  zoneId: NWSZoneID;
};

/**
 * @description A collection of alerts.
 */
export type AlertsActiveZone200 = AlertCollectionGeoJson;

/**
 * @description An error response.
 */
export type AlertsActiveZoneError = ProblemDetail;

export type AlertsActiveZoneQueryResponse = AlertsActiveZone200;

export type AlertsActiveZoneQuery = {
  Response: AlertsActiveZone200;
  PathParams: AlertsActiveZonePathParams;
  Errors: any;
};

export type AlertsActiveAreaPathParams = {
  /**
   * @description State/territory codes and marine area codes
   */
  area: AreaCode;
};

/**
 * @description A collection of alerts.
 */
export type AlertsActiveArea200 = AlertCollectionGeoJson;

/**
 * @description An error response.
 */
export type AlertsActiveAreaError = ProblemDetail;

export type AlertsActiveAreaQueryResponse = AlertsActiveArea200;

export type AlertsActiveAreaQuery = {
  Response: AlertsActiveArea200;
  PathParams: AlertsActiveAreaPathParams;
  Errors: any;
};

export type AlertsActiveRegionPathParams = {
  /**
   * @description Marine region code. These are groups of marine areas combined.\n* AL: Alaska waters (PK)\n* AT: Atlantic Ocean (AM, AN)\n* GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL)\n* GM: Gulf of Mexico (GM)\n* PA: Eastern Pacific Ocean and U.S. West Coast (PZ)\n* PI: Central and Western Pacific (PH, PM, PS)\n
   * @type string
   */
  region: MarineRegionCode;
};

/**
 * @description A collection of alerts.
 */
export type AlertsActiveRegion200 = AlertCollectionGeoJson;

/**
 * @description An error response.
 */
export type AlertsActiveRegionError = ProblemDetail;

export type AlertsActiveRegionQueryResponse = AlertsActiveRegion200;

export type AlertsActiveRegionQuery = {
  Response: AlertsActiveRegion200;
  PathParams: AlertsActiveRegionPathParams;
  Errors: any;
};

/**
 * @description A list of recognized event types
 */
export type AlertsTypes200 = {
  /**
   * @description A list of recognized event types
   * @type array | undefined
   */
  eventTypes?: string[];
};

/**
 * @description An error response.
 */
export type AlertsTypesError = ProblemDetail;

export type AlertsTypesQueryResponse = AlertsTypes200;

export type AlertsTypesQuery = {
  Response: AlertsTypes200;
  Errors: any;
};

export type AlertsSinglePathParams = {
  /**
   * @description The identifier of the alert message.
   * @type string
   */
  id: AlertId;
};

/**
 * @description An alert record
 */
export type AlertsSingle200 = AlertGeoJson;

/**
 * @description An error response.
 */
export type AlertsSingleError = ProblemDetail;

export type AlertsSingleQueryResponse = AlertsSingle200;

export type AlertsSingleQuery = {
  Response: AlertsSingle200;
  PathParams: AlertsSinglePathParams;
  Errors: any;
};

export type CwsuPathParams = {
  /**
   * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
   * @type string
   */
  cwsuId: NWSCenterWeatherServiceUnitId;
};

/**
 * @description success
 */
export type Cwsu200 = Office;

/**
 * @description An error response.
 */
export type CwsuError = ProblemDetail;

export type CwsuQueryResponse = Cwsu200;

export type CwsuQuery = {
  Response: Cwsu200;
  PathParams: CwsuPathParams;
  Errors: any;
};

export type CwasPathParams = {
  /**
   * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
   * @type string
   */
  cwsuId: NWSCenterWeatherServiceUnitId;
};

/**
 * @description success
 */
export type Cwas200 = CenterWeatherAdvisoryCollectionGeoJson;

/**
 * @description An error response.
 */
export type CwasError = ProblemDetail;

export type CwasQueryResponse = Cwas200;

export type CwasQuery = {
  Response: Cwas200;
  PathParams: CwasPathParams;
  Errors: any;
};

export type CwaPathParams = {
  /**
   * @description Three-letter identifier for a Center Weather Service Unit (CWSU).
   * @type string
   */
  cwsuId: NWSCenterWeatherServiceUnitId;
  /**
   * @description Date (in YYYY-MM-DD format).
   * @type string, date
   */
  date: _Date;
  /**
   * @description Sequence number
   * @minLength 100
   * @type integer
   */
  sequence: number;
};

/**
 * @description success
 */
export type Cwa200 = CenterWeatherAdvisoryGeoJson;

/**
 * @description An error response.
 */
export type CwaError = ProblemDetail;

export type CwaQueryResponse = Cwa200;

export type CwaQuery = {
  Response: Cwa200;
  PathParams: CwaPathParams;
  Errors: any;
};

export type SigmetQueryQueryParams = {
  /**
   * @description Start time
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @description End time
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @description Date (in YYYY-MM-DD format).
   * @type string | undefined, date
   */
  date?: _Date;
  /**
   * @description ATSU Identifier
   * @pattern ^[A-Z]{3,4}$
   * @type string | undefined
   */
  atsu?: ATSUIdentifier;
  /**
   * @description SIGMET sequence number
   * @type string | undefined
   */
  sequence?: SigmetSequenceNumber;
};

/**
 * @description success
 */
export type SigmetQuery200 = SigmetCollectionGeoJson;

/**
 * @description An error response.
 */
export type SigmetQueryError = ProblemDetail;

export type SigmetQueryQueryResponse = SigmetQuery200;

export type SigmetQueryQuery = {
  Response: SigmetQuery200;
  QueryParams: SigmetQueryQueryParams;
  Errors: any;
};

export type SigmetsByATSUPathParams = {
  /**
   * @description ATSU Identifier
   * @pattern ^[A-Z]{3,4}$
   * @type string
   */
  atsu: ATSUIdentifier;
};

/**
 * @description success
 */
export type SigmetsByATSU200 = SigmetCollectionGeoJson;

/**
 * @description An error response.
 */
export type SigmetsByATSUError = ProblemDetail;

export type SigmetsByATSUQueryResponse = SigmetsByATSU200;

export type SigmetsByATSUQuery = {
  Response: SigmetsByATSU200;
  PathParams: SigmetsByATSUPathParams;
  Errors: any;
};

export type SigmetsByATSUByDatePathParams = {
  /**
   * @description ATSU Identifier
   * @pattern ^[A-Z]{3,4}$
   * @type string
   */
  atsu: ATSUIdentifier;
  /**
   * @description Date (in YYYY-MM-DD format).
   * @type string, date
   */
  date: _Date;
};

/**
 * @description success
 */
export type SigmetsByATSUByDate200 = SigmetCollectionGeoJson;

/**
 * @description An error response.
 */
export type SigmetsByATSUByDateError = ProblemDetail;

export type SigmetsByATSUByDateQueryResponse = SigmetsByATSUByDate200;

export type SigmetsByATSUByDateQuery = {
  Response: SigmetsByATSUByDate200;
  PathParams: SigmetsByATSUByDatePathParams;
  Errors: any;
};

export type SigmetPathParams = {
  /**
   * @description ATSU Identifier
   * @pattern ^[A-Z]{3,4}$
   * @type string
   */
  atsu: ATSUIdentifier;
  /**
   * @description Date (in YYYY-MM-DD format).
   * @type string, date
   */
  date: _Date;
  /**
   * @description A time (in HHMM format). This is always specified in UTC (Zulu) time.
   * @pattern ^([01][0-9]|2[0-3])[0-5][0-9]$
   * @type string
   */
  time: Time;
};

/**
 * @description success
 */
export type Sigmet200 = SigmetGeoJson;

/**
 * @description An error response.
 */
export type SigmetError = ProblemDetail;

export type SigmetQueryResponse = Sigmet200;

export type SigmetQuery = {
  Response: Sigmet200;
  PathParams: SigmetPathParams;
  Errors: any;
};

/**
 * @description A set of glossary terms
 */
export type Glossary200 = {
  '@context'?: JsonLdContext;
  /**
   * @description A list of glossary terms
   * @type array | undefined
   */
  glossary?: {
    /**
     * @description The term being defined
     * @type string | undefined
     */
    term?: string;
    /**
     * @description A definition for the term
     * @type string | undefined
     */
    definition?: string;
  }[];
};

/**
 * @description An error response.
 */
export type GlossaryError = ProblemDetail;

export type GlossaryQueryResponse = Glossary200;

export type GlossaryQuery = {
  Response: Glossary200;
  Errors: any;
};

export type GridpointPathParams = {
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string
   */
  wfo: NWSForecastOfficeId;
  /**
   * @description Forecast grid X coordinate
   * @minLength 0
   * @type integer
   */
  x: number;
  /**
   * @description Forecast grid Y coordinate
   * @minLength 0
   * @type integer
   */
  y: number;
};

/**
 * @description Gridpoint forecast data
 */
export type Gridpoint200 = GridpointGeoJson;

/**
 * @description An error response.
 */
export type GridpointError = ProblemDetail;

export type GridpointQueryResponse = Gridpoint200;

export type GridpointQuery = {
  Response: Gridpoint200;
  PathParams: GridpointPathParams;
  Errors: any;
};

export type GridpointForecastPathParams = {
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string
   */
  wfo: NWSForecastOfficeId;
  /**
   * @description Forecast grid X coordinate
   * @minLength 0
   * @type integer
   */
  x: number;
  /**
   * @description Forecast grid Y coordinate
   * @minLength 0
   * @type integer
   */
  y: number;
};

export type GridpointForecastQueryParams = {
  /**
   * @description Denotes the units used in the textual portions of the forecast.
   * @type string | undefined
   */
  units?: GridpointForecastUnits;
};

export const gridpointForecastHeaderParamsFeatureFlagsEnum = {
  forecast_temperature_qv: 'forecast_temperature_qv',
  forecast_wind_speed_qv: 'forecast_wind_speed_qv',
} as const;

export type GridpointForecastHeaderParamsFeatureFlagsEnumKey =
  (typeof gridpointForecastHeaderParamsFeatureFlagsEnum)[keyof typeof gridpointForecastHeaderParamsFeatureFlagsEnum];

export type GridpointForecastHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* forecast_temperature_qv: Represent temperature as QuantitativeValue\n* forecast_wind_speed_qv: Represent wind speed as QuantitativeValue\n
   * @type array | undefined
   */
  'Feature-Flags'?: GridpointForecastHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description A forecast for a gridpoint.
 */
export type GridpointForecast200 = Gridpoint12hForecastGeoJson;

/**
 * @description An error response.
 */
export type GridpointForecastError = ProblemDetail;

export type GridpointForecastQueryResponse = GridpointForecast200;

export type GridpointForecastQuery = {
  Response: GridpointForecast200;
  PathParams: GridpointForecastPathParams;
  QueryParams: GridpointForecastQueryParams;
  HeaderParams: GridpointForecastHeaderParams;
  Errors: any;
};

export type GridpointForecastHourlyPathParams = {
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string
   */
  wfo: NWSForecastOfficeId;
  /**
   * @description Forecast grid X coordinate
   * @minLength 0
   * @type integer
   */
  x: number;
  /**
   * @description Forecast grid Y coordinate
   * @minLength 0
   * @type integer
   */
  y: number;
};

export type GridpointForecastHourlyQueryParams = {
  /**
   * @description Denotes the units used in the textual portions of the forecast.
   * @type string | undefined
   */
  units?: GridpointForecastUnits;
};

export const gridpointForecastHourlyHeaderParamsFeatureFlagsEnum = {
  forecast_temperature_qv: 'forecast_temperature_qv',
  forecast_wind_speed_qv: 'forecast_wind_speed_qv',
} as const;

export type GridpointForecastHourlyHeaderParamsFeatureFlagsEnumKey =
  (typeof gridpointForecastHourlyHeaderParamsFeatureFlagsEnum)[keyof typeof gridpointForecastHourlyHeaderParamsFeatureFlagsEnum];

export type GridpointForecastHourlyHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* forecast_temperature_qv: Represent temperature as QuantitativeValue\n* forecast_wind_speed_qv: Represent wind speed as QuantitativeValue\n
   * @type array | undefined
   */
  'Feature-Flags'?: GridpointForecastHourlyHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description A forecast for a gridpoint.
 */
export type GridpointForecastHourly200 = GridpointHourlyForecastGeoJson;

/**
 * @description An error response.
 */
export type GridpointForecastHourlyError = ProblemDetail;

export type GridpointForecastHourlyQueryResponse = GridpointForecastHourly200;

export type GridpointForecastHourlyQuery = {
  Response: GridpointForecastHourly200;
  PathParams: GridpointForecastHourlyPathParams;
  QueryParams: GridpointForecastHourlyQueryParams;
  HeaderParams: GridpointForecastHourlyHeaderParams;
  Errors: any;
};

export type GridpointStationsPathParams = {
  /**
   * @description Three-letter identifier for a NWS office.
   * @type string
   */
  wfo: NWSForecastOfficeId;
  /**
   * @description Forecast grid X coordinate
   * @minLength 0
   * @type integer
   */
  x: number;
  /**
   * @description Forecast grid Y coordinate
   * @minLength 0
   * @type integer
   */
  y: number;
};

export type GridpointStationsQueryParams = {
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @default 500
   * @type integer | undefined
   */
  limit?: number;
};

export const gridpointStationsHeaderParamsFeatureFlagsEnum = {
  obs_station_provider: 'obs_station_provider',
} as const;

export type GridpointStationsHeaderParamsFeatureFlagsEnumKey =
  (typeof gridpointStationsHeaderParamsFeatureFlagsEnum)[keyof typeof gridpointStationsHeaderParamsFeatureFlagsEnum];

export type GridpointStationsHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* obs_station_provider: Include the data provider in the metadata about observation stations\n
   * @type array | undefined
   */
  'Feature-Flags'?: GridpointStationsHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description A collection of observation stations.
 */
export type GridpointStations200 = ObservationStationCollectionGeoJson;

/**
 * @description An error response.
 */
export type GridpointStationsError = ProblemDetail;

export type GridpointStationsQueryResponse = GridpointStations200;

export type GridpointStationsQuery = {
  Response: GridpointStations200;
  PathParams: GridpointStationsPathParams;
  QueryParams: GridpointStationsQueryParams;
  HeaderParams: GridpointStationsHeaderParams;
  Errors: any;
};

export type IconsPathParams = {
  /**
   * @description .
   * @type string
   */
  set: string;
  /**
   * @description .
   * @type string
   */
  timeOfDay: string;
  /**
   * @description .
   * @type string
   */
  first: string;
};

export const iconsQueryParamsSizeEnum = {
  small: 'small',
  medium: 'medium',
  large: 'large',
} as const;

export type IconsQueryParamsSizeEnumKey = (typeof iconsQueryParamsSizeEnum)[keyof typeof iconsQueryParamsSizeEnum];

export type IconsQueryParams = {
  /**
   * @description Font size
   */
  size?: IconsQueryParamsSizeEnumKey | number;
  /**
   * @description Font size
   * @minLength 2
   * @maxLength 24
   * @type integer | undefined
   */
  fontsize?: number;
};

/**
 * @description success
 */
export type Icons200 = BinaryFile;

/**
 * @description An error response.
 */
export type IconsError = ProblemDetail;

export type IconsQueryResponse = Icons200;

export type IconsQuery = {
  Response: Icons200;
  PathParams: IconsPathParams;
  QueryParams: IconsQueryParams;
  Errors: any;
};

export type IconsDualConditionPathParams = {
  /**
   * @description .
   * @type string
   */
  set: string;
  /**
   * @description .
   * @type string
   */
  timeOfDay: string;
  /**
   * @description .
   * @type string
   */
  first: string;
  /**
   * @description .
   * @type string
   */
  second: string;
};

export const iconsDualConditionQueryParamsSizeEnum = {
  small: 'small',
  medium: 'medium',
  large: 'large',
} as const;

export type IconsDualConditionQueryParamsSizeEnumKey =
  (typeof iconsDualConditionQueryParamsSizeEnum)[keyof typeof iconsDualConditionQueryParamsSizeEnum];

export type IconsDualConditionQueryParams = {
  /**
   * @description Font size
   */
  size?: IconsDualConditionQueryParamsSizeEnumKey | number;
  /**
   * @description Font size
   * @minLength 2
   * @maxLength 24
   * @type integer | undefined
   */
  fontsize?: number;
};

/**
 * @description success
 */
export type IconsDualCondition200 = BinaryFile;

/**
 * @description An error response.
 */
export type IconsDualConditionError = ProblemDetail;

export type IconsDualConditionQueryResponse = IconsDualCondition200;

export type IconsDualConditionQuery = {
  Response: IconsDualCondition200;
  PathParams: IconsDualConditionPathParams;
  QueryParams: IconsDualConditionQueryParams;
  Errors: any;
};

/**
 * @description success
 */
export type IconsSummary200 = {
  '@context'?: JsonLdContext;
  /**
   * @type object
   */
  icons: {
    [key: string]: {
      /**
       * @type string
       */
      description: string;
    };
  };
};

/**
 * @description An error response.
 */
export type IconsSummaryError = ProblemDetail;

export type IconsSummaryQueryResponse = IconsSummary200;

export type IconsSummaryQuery = {
  Response: IconsSummary200;
  Errors: any;
};

export const satelliteThumbnailsPathParamsAreaEnum = {
  a: 'a',
  e: 'e',
  g: 'g',
  h: 'h',
  p: 'p',
  s: 's',
  w: 'w',
} as const;

export type SatelliteThumbnailsPathParamsAreaEnumKey =
  (typeof satelliteThumbnailsPathParamsAreaEnum)[keyof typeof satelliteThumbnailsPathParamsAreaEnum];

export type SatelliteThumbnailsPathParams = {
  /**
   * @description .
   * @type string
   */
  area: SatelliteThumbnailsPathParamsAreaEnumKey;
};

/**
 * @description An image file
 */
export type SatelliteThumbnails200 = BinaryFile;

/**
 * @description An error response.
 */
export type SatelliteThumbnailsError = ProblemDetail;

export type SatelliteThumbnailsQueryResponse = SatelliteThumbnails200;

export type SatelliteThumbnailsQuery = {
  Response: SatelliteThumbnails200;
  PathParams: SatelliteThumbnailsPathParams;
  Errors: any;
};

export type StationObservationListPathParams = {
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
};

export type StationObservationListQueryParams = {
  /**
   * @description Start time
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @description End time
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @type integer | undefined
   */
  limit?: number;
};

/**
 * @description A collection of observation records.
 */
export type StationObservationList200 = ObservationCollectionGeoJson;

/**
 * @description An error response.
 */
export type StationObservationListError = ProblemDetail;

export type StationObservationListQueryResponse = StationObservationList200;

export type StationObservationListQuery = {
  Response: StationObservationList200;
  PathParams: StationObservationListPathParams;
  QueryParams: StationObservationListQueryParams;
  Errors: any;
};

export type StationObservationLatestPathParams = {
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
};

export type StationObservationLatestQueryParams = {
  /**
   * @description Require QC
   * @type boolean | undefined
   */
  require_qc?: boolean;
};

/**
 * @description An observation record.
 */
export type StationObservationLatest200 = ObservationGeoJson;

/**
 * @description An error response.
 */
export type StationObservationLatestError = ProblemDetail;

export type StationObservationLatestQueryResponse = StationObservationLatest200;

export type StationObservationLatestQuery = {
  Response: StationObservationLatest200;
  PathParams: StationObservationLatestPathParams;
  QueryParams: StationObservationLatestQueryParams;
  Errors: any;
};

export type StationObservationTimePathParams = {
  /**
   * @description Timestamp of requested observation
   * @type string, date-time
   */
  time: string;
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
};

/**
 * @description An observation record.
 */
export type StationObservationTime200 = ObservationGeoJson;

/**
 * @description An error response.
 */
export type StationObservationTimeError = ProblemDetail;

export type StationObservationTimeQueryResponse = StationObservationTime200;

export type StationObservationTimeQuery = {
  Response: StationObservationTime200;
  PathParams: StationObservationTimePathParams;
  Errors: any;
};

export type TafsPathParams = {
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
};

/**
 * @description success
 */
export type Tafs200 = any;

/**
 * @description An error response.
 */
export type TafsError = ProblemDetail;

export type TafsQueryResponse = Tafs200;

export type TafsQuery = {
  Response: Tafs200;
  PathParams: TafsPathParams;
  Errors: any;
};

export type TafPathParams = {
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
  /**
   * @description Date (in YYYY-MM-DD format).
   * @type string, date
   */
  date: _Date;
  /**
   * @description A time (in HHMM format). This is always specified in UTC (Zulu) time.
   * @pattern ^([01][0-9]|2[0-3])[0-5][0-9]$
   * @type string
   */
  time: Time;
};

/**
 * @description success
 */
export type Taf200 = any;

/**
 * @description An error response.
 */
export type TafError = ProblemDetail;

export type TafQueryResponse = Taf200;

export type TafQuery = {
  Response: Taf200;
  PathParams: TafPathParams;
  Errors: any;
};

export type ObsStationsQueryParams = {
  /**
   * @description Filter by observation station ID
   * @type array | undefined
   */
  id?: string[];
  /**
   * @description Filter by state/marine area code
   * @type array | undefined
   */
  state?: AreaCode[];
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @default 500
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description Pagination cursor
   * @type string | undefined
   */
  cursor?: string;
};

export const obsStationsHeaderParamsFeatureFlagsEnum = {
  obs_station_provider: 'obs_station_provider',
} as const;

export type ObsStationsHeaderParamsFeatureFlagsEnumKey =
  (typeof obsStationsHeaderParamsFeatureFlagsEnum)[keyof typeof obsStationsHeaderParamsFeatureFlagsEnum];

export type ObsStationsHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* obs_station_provider: Include the data provider in the metadata about observation stations\n
   * @type array | undefined
   */
  'Feature-Flags'?: ObsStationsHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description A collection of observation stations.
 */
export type ObsStations200 = ObservationStationCollectionGeoJson;

/**
 * @description An error response.
 */
export type ObsStationsError = ProblemDetail;

export type ObsStationsQueryResponse = ObsStations200;

export type ObsStationsQuery = {
  Response: ObsStations200;
  QueryParams: ObsStationsQueryParams;
  HeaderParams: ObsStationsHeaderParams;
  Errors: any;
};

export type ObsStationPathParams = {
  /**
   * @description Observation station ID
   * @type string
   */
  stationId: string;
};

export const obsStationHeaderParamsFeatureFlagsEnum = {
  obs_station_provider: 'obs_station_provider',
} as const;

export type ObsStationHeaderParamsFeatureFlagsEnumKey =
  (typeof obsStationHeaderParamsFeatureFlagsEnum)[keyof typeof obsStationHeaderParamsFeatureFlagsEnum];

export type ObsStationHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* obs_station_provider: Include the data provider in the metadata about observation stations\n
   * @type array | undefined
   */
  'Feature-Flags'?: ObsStationHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description success
 */
export type ObsStation200 = ObservationStationGeoJson;

/**
 * @description An error response.
 */
export type ObsStationError = ProblemDetail;

export type ObsStationQueryResponse = ObsStation200;

export type ObsStationQuery = {
  Response: ObsStation200;
  PathParams: ObsStationPathParams;
  HeaderParams: ObsStationHeaderParams;
  Errors: any;
};

export type OfficePathParams = {
  /**
   * @description NWS office ID
   */
  officeId: NWSOfficeId;
};

/**
 * @description success
 */
export type Office200 = Office;

/**
 * @description An error response.
 */
export type OfficeError = ProblemDetail;

export type OfficeQueryResponse = Office200;

export type OfficeQuery = {
  Response: Office200;
  PathParams: OfficePathParams;
  Errors: any;
};

export type OfficeHeadlinePathParams = {
  /**
   * @description NWS office ID
   */
  officeId: NWSOfficeId;
  /**
   * @description Headline record ID
   * @type string
   */
  headlineId: string;
};

/**
 * @description success
 */
export type OfficeHeadline200 = OfficeHeadline;

/**
 * @description An error response.
 */
export type OfficeHeadlineError = ProblemDetail;

export type OfficeHeadlineQueryResponse = OfficeHeadline200;

export type OfficeHeadlineQuery = {
  Response: OfficeHeadline200;
  PathParams: OfficeHeadlinePathParams;
  Errors: any;
};

export type OfficeHeadlinesPathParams = {
  /**
   * @description NWS office ID
   */
  officeId: NWSOfficeId;
};

/**
 * @description success
 */
export type OfficeHeadlines200 = OfficeHeadlineCollection;

/**
 * @description An error response.
 */
export type OfficeHeadlinesError = ProblemDetail;

export type OfficeHeadlinesQueryResponse = OfficeHeadlines200;

export type OfficeHeadlinesQuery = {
  Response: OfficeHeadlines200;
  PathParams: OfficeHeadlinesPathParams;
  Errors: any;
};

export type PointPathParams = {
  /**
   * @description Latitude
   * @minLength -90
   * @maxLength 90
   * @type number
   */
  latitude: number;
  /**
   * @description Longitude
   * @minLength -180
   * @maxLength 180
   * @type number
   */
  longitude: number;
};

/**
 * @description success
 */
export type Point200 = PointGeoJson;

/**
 * @description An error response.
 */
export type PointError = ProblemDetail;

export type PointQueryResponse = Point200;

export type PointQuery = {
  Response: Point200;
  PathParams: PointPathParams;
  Errors: any;
};

export type PointStationsPathParams = {
  /**
   * @description Latitude
   * @minLength -90
   * @maxLength 90
   * @type number
   */
  latitude: number;
  /**
   * @description Longitude
   * @minLength -180
   * @maxLength 180
   * @type number
   */
  longitude: number;
};

/**
 * @description redirect to gridpoint stations
 */
export type PointStations301 = any;

/**
 * @description An error response.
 */
export type PointStationsError = ProblemDetail;

export type PointStationsQueryResponse = any;

export type PointStationsQuery = {
  Response: any;
  PathParams: PointStationsPathParams;
  Errors: any;
};

export type RadarServersQueryParams = {
  /**
   * @description Show records from specific reporting host
   * @type string | undefined
   */
  reportingHost?: string;
};

/**
 * @description success
 */
export type RadarServers200 = any;

/**
 * @description An error response.
 */
export type RadarServersError = ProblemDetail;

export type RadarServersQueryResponse = RadarServers200;

export type RadarServersQuery = {
  Response: RadarServers200;
  QueryParams: RadarServersQueryParams;
  Errors: any;
};

export type RadarServerPathParams = {
  /**
   * @description Server ID
   * @type string
   */
  id: string;
};

export type RadarServerQueryParams = {
  /**
   * @description Show records from specific reporting host
   * @type string | undefined
   */
  reportingHost?: string;
};

/**
 * @description success
 */
export type RadarServer200 = any;

/**
 * @description An error response.
 */
export type RadarServerError = ProblemDetail;

export type RadarServerQueryResponse = RadarServer200;

export type RadarServerQuery = {
  Response: RadarServer200;
  PathParams: RadarServerPathParams;
  QueryParams: RadarServerQueryParams;
  Errors: any;
};

export type RadarStationsQueryParams = {
  /**
   * @description Limit results to a specific station type or types
   * @type array | undefined
   */
  stationType?: string[];
  /**
   * @description Show RDA and latency info from specific reporting host
   * @type string | undefined
   */
  reportingHost?: string;
  /**
   * @description Show latency info from specific LDM host
   * @type string | undefined
   */
  host?: string;
};

/**
 * @description success
 */
export type RadarStations200 = any;

/**
 * @description An error response.
 */
export type RadarStationsError = ProblemDetail;

export type RadarStationsQueryResponse = RadarStations200;

export type RadarStationsQuery = {
  Response: RadarStations200;
  QueryParams: RadarStationsQueryParams;
  Errors: any;
};

export type RadarStationPathParams = {
  /**
   * @description Radar station ID
   * @type string
   */
  stationId: string;
};

export type RadarStationQueryParams = {
  /**
   * @description Show RDA and latency info from specific reporting host
   * @type string | undefined
   */
  reportingHost?: string;
  /**
   * @description Show latency info from specific LDM host
   * @type string | undefined
   */
  host?: string;
};

/**
 * @description success
 */
export type RadarStation200 = any;

/**
 * @description An error response.
 */
export type RadarStationError = ProblemDetail;

export type RadarStationQueryResponse = RadarStation200;

export type RadarStationQuery = {
  Response: RadarStation200;
  PathParams: RadarStationPathParams;
  QueryParams: RadarStationQueryParams;
  Errors: any;
};

export type RadarStationAlarmsPathParams = {
  /**
   * @description Radar station ID
   * @type string
   */
  stationId: string;
};

/**
 * @description success
 */
export type RadarStationAlarms200 = any;

/**
 * @description An error response.
 */
export type RadarStationAlarmsError = ProblemDetail;

export type RadarStationAlarmsQueryResponse = RadarStationAlarms200;

export type RadarStationAlarmsQuery = {
  Response: RadarStationAlarms200;
  PathParams: RadarStationAlarmsPathParams;
  Errors: any;
};

export type RadarQueuePathParams = {
  /**
   * @description LDM host
   * @type string
   */
  host: string;
};

export type RadarQueueQueryParams = {
  /**
   * @description Record limit
   * @minLength 1
   * @maxLength 500
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  arrived?: ISO8601Interval;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  created?: ISO8601Interval;
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  published?: ISO8601Interval;
  /**
   * @description Station identifier
   * @type string | undefined
   */
  station?: string;
  /**
   * @description Record type
   * @type string | undefined
   */
  type?: string;
  /**
   * @description Originating product feed
   * @type string | undefined
   */
  feed?: string;
  /**
   * @description Resolution version
   * @minLength 1
   * @type integer | undefined
   */
  resolution?: number;
};

/**
 * @description success
 */
export type RadarQueue200 = any;

/**
 * @description An error response.
 */
export type RadarQueueError = ProblemDetail;

export type RadarQueueQueryResponse = RadarQueue200;

export type RadarQueueQuery = {
  Response: RadarQueue200;
  PathParams: RadarQueuePathParams;
  QueryParams: RadarQueueQueryParams;
  Errors: any;
};

export type RadarProfilerPathParams = {
  /**
   * @description Profiler station ID
   * @type string
   */
  stationId: string;
};

export type RadarProfilerQueryParams = {
  /**
   * @description A time interval in ISO 8601 format. This can be one of:\n\n    1. Start and end time\n    2. Start time and duration\n    3. Duration and end time\nThe string \"NOW\" can also be used in place of a start/end time.\n
   */
  time?: ISO8601Interval;
  /**
   * @description A time duration in ISO 8601 format.
   * @pattern ^P(\d+Y)?(\d+M)?(\d+D)?(T(\d+H)?(\d+M)?(\d+S)?)?$
   * @type string | undefined
   */
  interval?: ISO8601Duration;
};

/**
 * @description success
 */
export type RadarProfiler200 = any;

/**
 * @description An error response.
 */
export type RadarProfilerError = ProblemDetail;

export type RadarProfilerQueryResponse = RadarProfiler200;

export type RadarProfilerQuery = {
  Response: RadarProfiler200;
  PathParams: RadarProfilerPathParams;
  QueryParams: RadarProfilerQueryParams;
  Errors: any;
};

export type ProductsQueryQueryParams = {
  /**
   * @description Location id
   * @type array | undefined
   */
  location?: string[];
  /**
   * @description Start time
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @description End time
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @description Issuing office
   * @type array | undefined
   */
  office?: string[];
  /**
   * @description WMO id code
   * @type array | undefined
   */
  wmoid?: string[];
  /**
   * @description Product code
   * @type array | undefined
   */
  type?: string[];
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @type integer | undefined
   */
  limit?: number;
};

/**
 * @description success
 */
export type ProductsQuery200 = TextProductCollection;

/**
 * @description An error response.
 */
export type ProductsQueryError = ProblemDetail;

export type ProductsQueryQueryResponse = ProductsQuery200;

export type ProductsQueryQuery = {
  Response: ProductsQuery200;
  QueryParams: ProductsQueryQueryParams;
  Errors: any;
};

/**
 * @description success
 */
export type ProductLocations200 = TextProductLocationCollection;

/**
 * @description An error response.
 */
export type ProductLocationsError = ProblemDetail;

export type ProductLocationsQueryResponse = ProductLocations200;

export type ProductLocationsQuery = {
  Response: ProductLocations200;
  Errors: any;
};

/**
 * @description success
 */
export type ProductTypes200 = TextProductTypeCollection;

/**
 * @description An error response.
 */
export type ProductTypesError = ProblemDetail;

export type ProductTypesQueryResponse = ProductTypes200;

export type ProductTypesQuery = {
  Response: ProductTypes200;
  Errors: any;
};

export type ProductPathParams = {
  /**
   * @description .
   * @type string
   */
  productId: string;
};

/**
 * @description success
 */
export type Product200 = TextProduct;

/**
 * @description An error response.
 */
export type ProductError = ProblemDetail;

export type ProductQueryResponse = Product200;

export type ProductQuery = {
  Response: Product200;
  PathParams: ProductPathParams;
  Errors: any;
};

export type ProductsTypePathParams = {
  /**
   * @description .
   * @type string
   */
  typeId: string;
};

/**
 * @description success
 */
export type ProductsType200 = TextProductCollection;

/**
 * @description An error response.
 */
export type ProductsTypeError = ProblemDetail;

export type ProductsTypeQueryResponse = ProductsType200;

export type ProductsTypeQuery = {
  Response: ProductsType200;
  PathParams: ProductsTypePathParams;
  Errors: any;
};

export type ProductsTypeLocationsPathParams = {
  /**
   * @description .
   * @type string
   */
  typeId: string;
};

/**
 * @description success
 */
export type ProductsTypeLocations200 = TextProductLocationCollection;

/**
 * @description An error response.
 */
export type ProductsTypeLocationsError = ProblemDetail;

export type ProductsTypeLocationsQueryResponse = ProductsTypeLocations200;

export type ProductsTypeLocationsQuery = {
  Response: ProductsTypeLocations200;
  PathParams: ProductsTypeLocationsPathParams;
  Errors: any;
};

export type LocationProductsPathParams = {
  /**
   * @description .
   * @type string
   */
  locationId: string;
};

/**
 * @description success
 */
export type LocationProducts200 = TextProductTypeCollection;

/**
 * @description An error response.
 */
export type LocationProductsError = ProblemDetail;

export type LocationProductsQueryResponse = LocationProducts200;

export type LocationProductsQuery = {
  Response: LocationProducts200;
  PathParams: LocationProductsPathParams;
  Errors: any;
};

export type ProductsTypeLocationPathParams = {
  /**
   * @description .
   * @type string
   */
  typeId: string;
  /**
   * @description .
   * @type string
   */
  locationId: string;
};

/**
 * @description success
 */
export type ProductsTypeLocation200 = TextProductCollection;

/**
 * @description An error response.
 */
export type ProductsTypeLocationError = ProblemDetail;

export type ProductsTypeLocationQueryResponse = ProductsTypeLocation200;

export type ProductsTypeLocationQuery = {
  Response: ProductsTypeLocation200;
  PathParams: ProductsTypeLocationPathParams;
  Errors: any;
};

export type LatestProductTypeLocationPathParams = {
  /**
   * @description .
   * @type string
   */
  typeId: string;
  /**
   * @description .
   * @type string
   */
  locationId: string;
};

/**
 * @description success
 */
export type LatestProductTypeLocation200 = TextProductCollection;

/**
 * @description An error response.
 */
export type LatestProductTypeLocationError = ProblemDetail;

export type LatestProductTypeLocationQueryResponse = LatestProductTypeLocation200;

export type LatestProductTypeLocationQuery = {
  Response: LatestProductTypeLocation200;
  PathParams: LatestProductTypeLocationPathParams;
  Errors: any;
};

export type ZoneListQueryParams = {
  /**
   * @description Zone ID (forecast or county)
   * @type array | undefined
   */
  id?: Array<NWSZoneID | string>;
  /**
   * @description State/marine area code
   * @type array | undefined
   */
  area?: AreaCode[];
  /**
   * @description Region code
   * @type array | undefined
   */
  region?: RegionCode[];
  /**
   * @description Zone type
   * @type array | undefined
   */
  type?: NWSZoneType[];
  /**
   * @description Point (latitude,longitude)
   * @pattern ^(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?)$
   * @type string | undefined
   */
  point?: PointString;
  /**
   * @description Include geometry in results (true/false)
   * @type boolean | undefined
   */
  include_geometry?: boolean;
  /**
   * @description Limit
   * @minLength 1
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description Effective date/time
   * @type string | undefined, date-time
   */
  effective?: string;
};

/**
 * @description success
 */
export type ZoneList200 = ZoneCollectionGeoJson;

/**
 * @description An error response.
 */
export type ZoneListError = ProblemDetail;

export type ZoneListQueryResponse = ZoneList200;

export type ZoneListQuery = {
  Response: ZoneList200;
  QueryParams: ZoneListQueryParams;
  Errors: any;
};

export type ZoneListTypePathParams = {
  /**
   * @description Zone type
   * @type string
   */
  type: NWSZoneType;
};

export type ZoneListTypeQueryParams = {
  /**
   * @description Zone ID (forecast or county)
   * @type array | undefined
   */
  id?: Array<NWSZoneID | string>;
  /**
   * @description State/marine area code
   * @type array | undefined
   */
  area?: AreaCode[];
  /**
   * @description Region code
   * @type array | undefined
   */
  region?: RegionCode[];
  /**
   * @description Zone type
   * @type array | undefined
   */
  type?: NWSZoneType[];
  /**
   * @description Point (latitude,longitude)
   * @pattern ^(-?\d+(?:\.\d+)?),(-?\d+(?:\.\d+)?)$
   * @type string | undefined
   */
  point?: PointString;
  /**
   * @description Include geometry in results (true/false)
   * @type boolean | undefined
   */
  include_geometry?: boolean;
  /**
   * @description Limit
   * @minLength 1
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description Effective date/time
   * @type string | undefined, date-time
   */
  effective?: string;
};

/**
 * @description success
 */
export type ZoneListType200 = ZoneCollectionGeoJson;

/**
 * @description An error response.
 */
export type ZoneListTypeError = ProblemDetail;

export type ZoneListTypeQueryResponse = ZoneListType200;

export type ZoneListTypeQuery = {
  Response: ZoneListType200;
  PathParams: ZoneListTypePathParams;
  QueryParams: ZoneListTypeQueryParams;
  Errors: any;
};

export type ZonePathParams = {
  /**
   * @description Zone type
   * @type string
   */
  type: NWSZoneType;
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string
   */
  zoneId: NWSZoneID;
};

export type ZoneQueryParams = {
  /**
   * @description Effective date/time
   * @type string | undefined, date-time
   */
  effective?: string;
};

/**
 * @description success
 */
export type Zone200 = ZoneGeoJson;

/**
 * @description An error response.
 */
export type ZoneError = ProblemDetail;

export type ZoneQueryResponse = Zone200;

export type ZoneQuery = {
  Response: Zone200;
  PathParams: ZonePathParams;
  QueryParams: ZoneQueryParams;
  Errors: any;
};

export type ZoneForecastPathParams = {
  /**
   * @description Zone type
   * @type string
   */
  type: string;
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string
   */
  zoneId: NWSZoneID;
};

/**
 * @description success
 */
export type ZoneForecast200 = ZoneForecastGeoJson;

/**
 * @description An error response.
 */
export type ZoneForecastError = ProblemDetail;

export type ZoneForecastQueryResponse = ZoneForecast200;

export type ZoneForecastQuery = {
  Response: ZoneForecast200;
  PathParams: ZoneForecastPathParams;
  Errors: any;
};

export type ZoneObsPathParams = {
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string
   */
  zoneId: NWSZoneID;
};

export type ZoneObsQueryParams = {
  /**
   * @description Start date/time
   * @type string | undefined, date-time
   */
  start?: string;
  /**
   * @description End date/time
   * @type string | undefined, date-time
   */
  end?: string;
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @type integer | undefined
   */
  limit?: number;
};

/**
 * @description success
 */
export type ZoneObs200 = ObservationCollectionGeoJson;

/**
 * @description An error response.
 */
export type ZoneObsError = ProblemDetail;

export type ZoneObsQueryResponse = ZoneObs200;

export type ZoneObsQuery = {
  Response: ZoneObs200;
  PathParams: ZoneObsPathParams;
  QueryParams: ZoneObsQueryParams;
  Errors: any;
};

export type ZoneStationsPathParams = {
  /**
   * @description UGC identifier for a NWS forecast zone or county.\nThe first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations).\nThe third letter will be Z for public/fire zone or C for county.\n
   * @pattern ^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\d{3}$
   * @type string
   */
  zoneId: NWSZoneID;
};

export type ZoneStationsQueryParams = {
  /**
   * @description Limit
   * @minLength 1
   * @maxLength 500
   * @default 500
   * @type integer | undefined
   */
  limit?: number;
  /**
   * @description Pagination cursor
   * @type string | undefined
   */
  cursor?: string;
};

export const zoneStationsHeaderParamsFeatureFlagsEnum = {
  obs_station_provider: 'obs_station_provider',
} as const;

export type ZoneStationsHeaderParamsFeatureFlagsEnumKey =
  (typeof zoneStationsHeaderParamsFeatureFlagsEnum)[keyof typeof zoneStationsHeaderParamsFeatureFlagsEnum];

export type ZoneStationsHeaderParams = {
  /**
   * @description Enable future and experimental features (see documentation for more info):\n* obs_station_provider: Include the data provider in the metadata about observation stations\n
   * @type array | undefined
   */
  'Feature-Flags'?: ZoneStationsHeaderParamsFeatureFlagsEnumKey[];
};

/**
 * @description A collection of observation stations.
 */
export type ZoneStations200 = ObservationStationCollectionGeoJson;

/**
 * @description An error response.
 */
export type ZoneStationsError = ProblemDetail;

export type ZoneStationsQueryResponse = ZoneStations200;

export type ZoneStationsQuery = {
  Response: ZoneStations200;
  PathParams: ZoneStationsPathParams;
  QueryParams: ZoneStationsQueryParams;
  HeaderParams: ZoneStationsHeaderParams;
  Errors: any;
};
